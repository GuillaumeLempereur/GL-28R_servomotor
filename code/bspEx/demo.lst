
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08002820 l    d  .rodata	00000000 .rodata
08002868 l    d  .init_array	00000000 .init_array
08002870 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
2000052c l    d  .bss	00000000 .bss
200005f8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 /tmp/cc1GrbcG.o
f1e0f85f l       *ABS*	00000000 BootRAM
080003c0 l       .text	00000000 LoopCopyDataInit
080003b8 l       .text	00000000 CopyDataInit
080003d4 l       .text	00000000 LoopFillZerobss
080003ce l       .text	00000000 FillZerobss
080003e6 l       .text	00000000 LoopForever
08000400 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08002808 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001b0 l     F .text	00000000 register_tm_clones
080001e0 l     F .text	00000000 __do_global_dtors_aux
2000052c l       .bss	00000000 completed.6140
08002870 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000210 l     F .text	00000000 frame_dummy
20000530 l       .bss	00000000 object.6145
0800286c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08000398 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_it.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
2000054c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800118c l     F .text	00000094 SPIx_Init
08001220 l     F .text	00000040 SPIx_WriteRead
08001260 l     F .text	00000080 I2Cx_Init
20000550 l     O .bss	00000064 SpiHandle
200005b4 l     O .bss	0000003c I2cHandle
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08001728 l     F .text	00000024 I2C_TransferConfig
0800174c l     F .text	00000078 I2C_IsAcknowledgeFailed
080017c4 l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
0800182c l     F .text	00000050 I2C_WaitOnTXISFlagUntilTimeout
0800187c l     F .text	00000064 I2C_RequestMemoryWrite
080018e0 l     F .text	00000062 I2C_RequestMemoryRead
08001942 l     F .text	0000004c I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
200005f0 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
08001eb2 l     F .text	000000a0 SPI_WaitFifoStateUntilTimeout
08001f52 l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
08001fde l     F .text	0000002e SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
200005f4 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 mems.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08002874 l       .fini_array	00000000 __fini_array_end
2000052c l       .bss	00000000 __bss_start__
200005f8 l       ._user_heap_stack	00000000 end
200005f8 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
08002870 l       .fini_array	00000000 __fini_array_start
08002870 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 __end__
08002868 l       .init_array	00000000 __preinit_array_end
08002868 l       .init_array	00000000 __init_array_start
08002868 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 free
08000400  w    F .text	00000002 RTC_Alarm_IRQHandler
08000400  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08001d08 g     F .text	0000001e LSM303DLHC_AccFilterCmd
08000400  w    F .text	00000002 TIM8_CC_IRQHandler
080005e0 g     F .text	00000002 DebugMon_Handler
08002512 g     F .text	0000002e L3GD20_FilterConfig
08002496 g     F .text	00000040 L3GD20_EnableIT
08000f08 g     F .text	00000064 HAL_NVIC_SetPriority
08000400  w    F .text	00000002 TIM1_CC_IRQHandler
080005d6 g     F .text	00000002 HardFault_Handler
08000400  w    F .text	00000002 USB_HP_IRQHandler
080005e4 g     F .text	00000004 SysTick_Handler
08001160 g     F .text	0000000a HAL_GPIO_WritePin
08000400  w    F .text	00000002 PVD_IRQHandler
08001cce g     F .text	0000001c LSM303DLHC_AccRebootCmd
08000400  w    F .text	00000002 TAMP_STAMP_IRQHandler
080014e0 g     F .text	0000007c GYRO_IO_Init
08002874 g       *ABS*	00000000 _sidata
08000e2c g     F .text	00000034 HAL_RCC_GetHCLKFreq
080005e2 g     F .text	00000002 PendSV_Handler
080005d4 g     F .text	00000002 NMI_Handler
08000f6c g     F .text	00000018 HAL_NVIC_EnableIRQ
08002868 g       .init_array	00000000 __exidx_end
08000400  w    F .text	00000002 EXTI3_IRQHandler
08000dc8 g     F .text	00000064 HAL_RCC_GetSysClockFreq
08001408 g     F .text	0000001c BSP_LED_Off
08002848 g     O .rodata	00000010 aAPBAHBPrescTable
08001990 g     F .text	00000096 HAL_I2C_Init
08001a26  w    F .text	00000002 HAL_I2C_MspDeInit
08001174 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08000e60  w    F .text	00000002 HAL_MspInit
0800165c g     F .text	00000050 COMPASSACCELERO_IO_ITConfig
08001c58 g     F .text	00000030 BSP_ACCELERO_Init
0800116a g     F .text	00000008 HAL_GPIO_TogglePin
20000549 g     O .bss	00000001 DemoIndex
08002820 g       .text	00000000 _etext
2000052c g       .bss	00000000 _sbss
08000fb0 g     F .text	000001a4 HAL_GPIO_Init
08001c88 g     F .text	00000014 BSP_ACCELERO_GetXYZ
200004a8 g     O .data	00000004 BUTTON_PORT
0800155c g     F .text	00000044 GYRO_IO_Write
2000052c g     O .data	00000000 .hidden __TMC_END__
2000052a g     O .data	00000002 ThresholdHigh
08001440 g     F .text	0000008c BSP_PB_Init
08000400  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080005e8 g     F .text	00000006 EXTI0_IRQHandler
08000400  w    F .text	00000002 I2C2_EV_IRQHandler
20000528 g     O .data	00000002 ThresholdLow
08000ec8  w    F .text	0000001a HAL_Delay
08000400  w    F .text	00000002 FPU_IRQHandler
200004a0 g     O .data	00000004 SystemCoreClock
08000400  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
00000000  w      *UND*	00000000 malloc
080005dc g     F .text	00000002 UsageFault_Handler
08000400  w    F .text	00000002 ADC1_2_IRQHandler
08001154 g     F .text	0000000c HAL_GPIO_ReadPin
20000000 g       .data	00000000 _sdata
08000400  w    F .text	00000002 SPI1_IRQHandler
08000400  w    F .text	00000002 CAN_SCE_IRQHandler
08000400  w    F .text	00000002 TIM6_DAC_IRQHandler
080015e8 g     F .text	00000074 COMPASSACCELERO_IO_Init
08000f84 g     F .text	0000002c HAL_SYSTICK_Config
08000400  w    F .text	00000002 TIM8_UP_IRQHandler
080016ac g     F .text	0000003c COMPASSACCELERO_IO_Write
08002868 g       .init_array	00000000 __exidx_start
08001e96 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
08002824 g     O .rodata	00000004 _global_impure_ptr
08000290 g     F .text	0000005a __libc_init_array
08000400  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel4_IRQHandler
08002540 g     F .text	0000002e L3GD20_FilterCmd
08001a28 g     F .text	0000002c HAL_I2C_DeInit
0800200e g     F .text	000000b0 HAL_SPI_Init
08002808 g     F .text	00000000 _init
080023ac g     F .text	00000014 BSP_GYRO_GetXYZ
0800200c  w    F .text	00000002 HAL_SPI_MspInit
08000400  w    F .text	00000002 USART3_IRQHandler
0800025c g     F .text	00000032 __libc_fini_array
08002828 g     O .rodata	00000010 aPredivFactorTable
200005f8 g       .bss	00000000 _ebss
080016e8 g     F .text	00000040 COMPASSACCELERO_IO_Read
200004fc g     O .data	0000002c L3gd20Drv
08000400  w    F .text	00000002 DMA1_Channel7_IRQHandler
08001b4c g     F .text	00000104 HAL_I2C_Mem_Read
08000420 g     F .text	00000066 Toggle_Leds
080003b0  w    F .text	00000038 Reset_Handler
08002368 g     F .text	00000044 BSP_GYRO_Init
08000400  w    F .text	00000002 UART5_IRQHandler
08000400  w    F .text	00000002 ADC3_IRQHandler
08000e88 g     F .text	00000024 HAL_Init
080020c0 g     F .text	0000002c HAL_SPI_DeInit
08000400  w    F .text	00000002 TIM4_IRQHandler
08000400  w    F .text	00000002 CAN_RX1_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel1_IRQHandler
200004ac g     O .data	00000004 I2cxTimeout
00000000  w      *UND*	00000000 __deregister_frame_info
08000404 g     F .text	0000001c HAL_GPIO_EXTI_Callback
08000400  w    F .text	00000002 I2C1_EV_IRQHandler
080024d6 g     F .text	0000003c L3GD20_DisableIT
080020be  w    F .text	00000002 HAL_SPI_MspDeInit
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
080013ec g     F .text	0000001c BSP_LED_On
080023c0 g     F .text	00000032 L3GD20_Init
08000400  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000400  w    F .text	00000002 UART4_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel4_IRQHandler
08000400  w    F .text	00000002 TIM3_IRQHandler
08000400  w    F .text	00000002 RCC_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000400 g       .text	00000002 Default_Handler
08000400  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08000400  w    F .text	00000002 EXTI15_10_IRQHandler
08002570 g     F .text	000000dc L3GD20_ReadXYZAngRate
080002ec g     F .text	000000ac __register_exitproc
08001cea g     F .text	0000001e LSM303DLHC_AccFilterConfig
08000b90 g     F .text	00000238 HAL_RCC_ClockConfig
08000ee4 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
08001e14 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
080015a0 g     F .text	00000048 GYRO_IO_Read
08000400  w    F .text	00000002 TIM7_IRQHandler
0800243a g     F .text	0000005c L3GD20_INT1InterruptConfig
08002838 g     O .rodata	00000010 aPLLMULFactorTable
200004d0 g     O .data	0000002c Lsm303dlhcDrv
08000400  w    F .text	00000002 EXTI9_5_IRQHandler
08002360 g     F .text	00000006 HAL_SPI_GetState
08000400  w    F .text	00000002 RTC_WKUP_IRQHandler
08000ebc  w    F .text	0000000c HAL_GetTick
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
08001d26 g     F .text	000000ee LSM303DLHC_AccReadXYZ
08000400  w    F .text	00000002 SPI2_IRQHandler
08000400  w    F .text	00000002 USB_LP_CAN_RX0_IRQHandler
080005d8 g     F .text	00000002 MemManage_Handler
08000488 g     F .text	000000d4 main
080014cc g     F .text	00000014 BSP_PB_GetState
080020ec g     F .text	00000274 HAL_SPI_TransmitReceive
200004a4 g     O .data	00000004 SpixTimeout
08002da0 g       *ABS*	00000000 _siccmram
080005de g     F .text	00000002 SVC_Handler
08000400  w    F .text	00000002 DMA2_Channel5_IRQHandler
08002714 g     F .text	000000f4 GYRO_MEMS_Test
00000000  w      *UND*	00000000 __libc_fini
08000400  w    F .text	00000002 DMA1_Channel5_IRQHandler
08001c9c g     F .text	00000020 LSM303DLHC_AccInit
08000400  w    F .text	00000002 USB_LP_IRQHandler
08000400  w    F .text	00000002 EXTI4_IRQHandler
200004b0 g     O .data	00000020 LED_PORT
08001e50 g     F .text	00000046 LSM303DLHC_AccClickITEnable
08001c50 g     F .text	00000006 HAL_I2C_GetState
0800056c g     F .text	00000068 SystemInit
08002814 g     F .text	00000000 _fini
08000400  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08001cbc g     F .text	00000012 LSM303DLHC_AccReadID
08000250 g     F .text	0000000c atexit
10000000 g       .data	00000000 _eccmram
08000400  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000e62  w    F .text	00000024 HAL_InitTick
08002858 g     O .rodata	00000010 LED_PIN
08000eac  w    F .text	00000010 HAL_IncTick
08000400  w    F .text	00000002 ADC4_IRQHandler
080023f2 g     F .text	0000001c L3GD20_ReadID
08000400  w    F .text	00000002 WWDG_IRQHandler
0800198e  w    F .text	00000002 HAL_I2C_MspInit
08000400  w    F .text	00000002 TIM2_IRQHandler
0800264c g     F .text	000000c8 ACCELERO_MEMS_Test
08001424 g     F .text	0000001c BSP_LED_Toggle
08000400  w    F .text	00000002 COMP7_IRQHandler
20009fff g       *ABS*	00000000 _estack
08000400  w    F .text	00000002 COMP1_2_3_IRQHandler
08000400  w    F .text	00000002 EXTI1_IRQHandler
2000052c g       .data	00000000 _edata
10000000 g       .data	00000000 _sccmram
08000400  w    F .text	00000002 USART2_IRQHandler
08000400  w    F .text	00000002 COMP4_5_6_IRQHandler
080005f0 g     F .text	000005a0 HAL_RCC_OscConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000400  w    F .text	00000002 I2C2_ER_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel2_IRQHandler
080012e0 g     F .text	0000010c BSP_LED_Init
08000400  w    F .text	00000002 TIM8_BRK_IRQHandler
08000400  w    F .text	00000002 FLASH_IRQHandler
080005da g     F .text	00000002 BusFault_Handler
08000400  w    F .text	00000002 USART1_IRQHandler
08000400  w    F .text	00000002 SPI3_IRQHandler
08001a54 g     F .text	000000f8 HAL_I2C_Mem_Write
08000400  w    F .text	00000002 I2C1_ER_IRQHandler
20000428 g     O .data	00000078 BSP_examples
20000548 g     O .bss	00000001 UserPressButton
0800240e g     F .text	0000002c L3GD20_RebootCmd
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000000  w      *UND*	00000000 __register_frame_info
08001e32 g     F .text	0000001e LSM303DLHC_AccIT1Enable
08000400  w    F .text	00000002 USBWakeUp_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800055c g     F .text	00000010 Error_Handler
08000400  w    F .text	00000002 EXTI2_TSC_IRQHandler
08000400  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f240 502c 	movw	r0, #1324	; 0x52c
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	2000052f 	.word	0x2000052f

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f240 502c 	movw	r0, #1324	; 0x52c
 80001b6:	f240 532c 	movw	r3, #1324	; 0x52c
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f240 542c 	movw	r4, #1324	; 0x52c
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f642 0008 	movw	r0, #10248	; 0x2808
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f642 0008 	movw	r0, #10248	; 0x2808
 8000220:	f240 5130 	movw	r1, #1328	; 0x530
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f240 502c 	movw	r0, #1324	; 0x52c
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <atexit>:
 8000250:	4601      	mov	r1, r0
 8000252:	2000      	movs	r0, #0
 8000254:	4602      	mov	r2, r0
 8000256:	4603      	mov	r3, r0
 8000258:	f000 b848 	b.w	80002ec <__register_exitproc>

0800025c <__libc_fini_array>:
 800025c:	b538      	push	{r3, r4, r5, lr}
 800025e:	f642 0474 	movw	r4, #10356	; 0x2874
 8000262:	f642 0570 	movw	r5, #10352	; 0x2870
 8000266:	f6c0 0500 	movt	r5, #2048	; 0x800
 800026a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800026e:	1b64      	subs	r4, r4, r5
 8000270:	10a4      	asrs	r4, r4, #2
 8000272:	bf18      	it	ne
 8000274:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8000278:	d005      	beq.n	8000286 <__libc_fini_array+0x2a>
 800027a:	3c01      	subs	r4, #1
 800027c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000280:	4798      	blx	r3
 8000282:	2c00      	cmp	r4, #0
 8000284:	d1f9      	bne.n	800027a <__libc_fini_array+0x1e>
 8000286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800028a:	f002 bac3 	b.w	8002814 <_fini>
 800028e:	bf00      	nop

08000290 <__libc_init_array>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f642 0668 	movw	r6, #10344	; 0x2868
 8000296:	f642 0568 	movw	r5, #10344	; 0x2868
 800029a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800029e:	f6c0 0600 	movt	r6, #2048	; 0x800
 80002a2:	1b76      	subs	r6, r6, r5
 80002a4:	10b6      	asrs	r6, r6, #2
 80002a6:	bf1c      	itt	ne
 80002a8:	3d04      	subne	r5, #4
 80002aa:	2400      	movne	r4, #0
 80002ac:	d005      	beq.n	80002ba <__libc_init_array+0x2a>
 80002ae:	3401      	adds	r4, #1
 80002b0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80002b4:	4798      	blx	r3
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d1f9      	bne.n	80002ae <__libc_init_array+0x1e>
 80002ba:	f642 0670 	movw	r6, #10352	; 0x2870
 80002be:	f642 0568 	movw	r5, #10344	; 0x2868
 80002c2:	f6c0 0500 	movt	r5, #2048	; 0x800
 80002c6:	f6c0 0600 	movt	r6, #2048	; 0x800
 80002ca:	1b76      	subs	r6, r6, r5
 80002cc:	f002 fa9c 	bl	8002808 <_init>
 80002d0:	10b6      	asrs	r6, r6, #2
 80002d2:	bf1c      	itt	ne
 80002d4:	3d04      	subne	r5, #4
 80002d6:	2400      	movne	r4, #0
 80002d8:	d006      	beq.n	80002e8 <__libc_init_array+0x58>
 80002da:	3401      	adds	r4, #1
 80002dc:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80002e0:	4798      	blx	r3
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d1f9      	bne.n	80002da <__libc_init_array+0x4a>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	bd70      	pop	{r4, r5, r6, pc}
 80002ea:	bf00      	nop

080002ec <__register_exitproc>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	f642 0424 	movw	r4, #10276	; 0x2824
 80002f2:	f6c0 0400 	movt	r4, #2048	; 0x800
 80002f6:	b085      	sub	sp, #20
 80002f8:	6826      	ldr	r6, [r4, #0]
 80002fa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80002fe:	4607      	mov	r7, r0
 8000300:	2c00      	cmp	r4, #0
 8000302:	d044      	beq.n	800038e <__register_exitproc+0xa2>
 8000304:	6865      	ldr	r5, [r4, #4]
 8000306:	2d1f      	cmp	r5, #31
 8000308:	dd21      	ble.n	800034e <__register_exitproc+0x62>
 800030a:	f240 0400 	movw	r4, #0
 800030e:	f2c0 0400 	movt	r4, #0
 8000312:	b91c      	cbnz	r4, 800031c <__register_exitproc+0x30>
 8000314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000318:	b005      	add	sp, #20
 800031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000320:	9103      	str	r1, [sp, #12]
 8000322:	9202      	str	r2, [sp, #8]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f3af 8000 	nop.w
 800032a:	9903      	ldr	r1, [sp, #12]
 800032c:	9a02      	ldr	r2, [sp, #8]
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	4604      	mov	r4, r0
 8000332:	2800      	cmp	r0, #0
 8000334:	d0ee      	beq.n	8000314 <__register_exitproc+0x28>
 8000336:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 800033a:	2000      	movs	r0, #0
 800033c:	6025      	str	r5, [r4, #0]
 800033e:	6060      	str	r0, [r4, #4]
 8000340:	4605      	mov	r5, r0
 8000342:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8000346:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800034a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800034e:	b93f      	cbnz	r7, 8000360 <__register_exitproc+0x74>
 8000350:	1cab      	adds	r3, r5, #2
 8000352:	2000      	movs	r0, #0
 8000354:	3501      	adds	r5, #1
 8000356:	6065      	str	r5, [r4, #4]
 8000358:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800035c:	b005      	add	sp, #20
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8000364:	f04f 0c01 	mov.w	ip, #1
 8000368:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800036c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8000370:	fa0c f205 	lsl.w	r2, ip, r5
 8000374:	4316      	orrs	r6, r2
 8000376:	2f02      	cmp	r7, #2
 8000378:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800037c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8000380:	bf02      	ittt	eq
 8000382:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8000386:	431a      	orreq	r2, r3
 8000388:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800038c:	e7e0      	b.n	8000350 <__register_exitproc+0x64>
 800038e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8000392:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8000396:	e7b5      	b.n	8000304 <__register_exitproc+0x18>

08000398 <register_fini>:
 8000398:	f240 0300 	movw	r3, #0
 800039c:	f2c0 0300 	movt	r3, #0
 80003a0:	b12b      	cbz	r3, 80003ae <register_fini+0x16>
 80003a2:	f240 205d 	movw	r0, #605	; 0x25d
 80003a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003aa:	f7ff bf51 	b.w	8000250 <atexit>
 80003ae:	4770      	bx	lr

080003b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
	ldr	r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopForever+0x16>)
	cmp	r2, r3
 80003d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003da:	f000 f8c7 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f7ff ff57 	bl	8000290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e2:	f000 f851 	bl	8000488 <main>

080003e6 <LoopForever>:

LoopForever:
    b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e8:	20009fff 	.word	0x20009fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003ec:	08002874 	.word	0x08002874
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f4:	2000052c 	.word	0x2000052c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003f8:	2000052c 	.word	0x2000052c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003fc:	200005f8 	.word	0x200005f8

08000400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_2_IRQHandler>
	...

08000404 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (USER_BUTTON_PIN == GPIO_Pin)
 8000404:	2801      	cmp	r0, #1
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000406:	b508      	push	{r3, lr}
  if (USER_BUTTON_PIN == GPIO_Pin)
 8000408:	d107      	bne.n	800041a <HAL_GPIO_EXTI_Callback+0x16>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 800040a:	2000      	movs	r0, #0
 800040c:	f001 f85e 	bl	80014cc <BSP_PB_GetState>
 8000410:	2800      	cmp	r0, #0
 8000412:	d1fa      	bne.n	800040a <HAL_GPIO_EXTI_Callback+0x6>
    UserPressButton = 1;
 8000414:	4b01      	ldr	r3, [pc, #4]	; (800041c <HAL_GPIO_EXTI_Callback+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	bd08      	pop	{r3, pc}
 800041c:	20000548 	.word	0x20000548

08000420 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8000420:	b508      	push	{r3, lr}
    BSP_LED_Toggle(LED3);
 8000422:	2000      	movs	r0, #0
 8000424:	f000 fffe 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000428:	2064      	movs	r0, #100	; 0x64
 800042a:	f000 fd4d 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 800042e:	2001      	movs	r0, #1
 8000430:	f000 fff8 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000434:	2064      	movs	r0, #100	; 0x64
 8000436:	f000 fd47 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 800043a:	2003      	movs	r0, #3
 800043c:	f000 fff2 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000440:	2064      	movs	r0, #100	; 0x64
 8000442:	f000 fd41 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8000446:	2005      	movs	r0, #5
 8000448:	f000 ffec 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 800044c:	2064      	movs	r0, #100	; 0x64
 800044e:	f000 fd3b 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8000452:	2007      	movs	r0, #7
 8000454:	f000 ffe6 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 fd35 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 800045e:	2006      	movs	r0, #6
 8000460:	f000 ffe0 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000464:	2064      	movs	r0, #100	; 0x64
 8000466:	f000 fd2f 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 800046a:	2004      	movs	r0, #4
 800046c:	f000 ffda 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000470:	2064      	movs	r0, #100	; 0x64
 8000472:	f000 fd29 	bl	8000ec8 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8000476:	2002      	movs	r0, #2
 8000478:	f000 ffd4 	bl	8001424 <BSP_LED_Toggle>
    HAL_Delay(100);
 800047c:	2064      	movs	r0, #100	; 0x64
}
 800047e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_Toggle(LED9);
    HAL_Delay(100);
    BSP_LED_Toggle(LED7);
    HAL_Delay(100);
    BSP_LED_Toggle(LED5);
    HAL_Delay(100);
 8000482:	f000 bd21 	b.w	8000ec8 <HAL_Delay>
	...

08000488 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	b090      	sub	sp, #64	; 0x40
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800048c:	f000 fcfc 	bl	8000e88 <HAL_Init>
  uint32_t ret = HAL_OK;
  #endif /* USE_FULL_ASSERT */
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000494:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000496:	2502      	movs	r5, #2
  #ifdef USE_FULL_ASSERT
  uint32_t ret = HAL_OK;
  #endif /* USE_FULL_ASSERT */
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000498:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	930e      	str	r3, [sp, #56]	; 0x38
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800049e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a4:	930f      	str	r3, [sp, #60]	; 0x3c
  #ifdef USE_FULL_ASSERT
  uint32_t ret = HAL_OK;
  #endif /* USE_FULL_ASSERT */
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a6:	9606      	str	r6, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	950d      	str	r5, [sp, #52]	; 0x34
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004ac:	f000 f8a0 	bl	80005f0 <HAL_RCC_OscConfig>
#endif /* USE_FULL_ASSERT */
    	
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80004b0:	230f      	movs	r3, #15
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80004b2:	4629      	mov	r1, r5
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
#endif /* USE_FULL_ASSERT */
    	
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80004b4:	9301      	str	r3, [sp, #4]
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80004b6:	a801      	add	r0, sp, #4
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	9304      	str	r3, [sp, #16]
#endif /* USE_FULL_ASSERT */
    	
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004be:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	9405      	str	r4, [sp, #20]
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80004c4:	f000 fb64 	bl	8000b90 <HAL_RCC_ClockConfig>
  
  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
  
  /* Initialize LEDs and User_Button on STM32F3-Discovery ------------------*/
  BSP_LED_Init(LED4);
 80004c8:	4630      	mov	r0, r6
 80004ca:	f000 ff09 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80004ce:	4620      	mov	r0, r4
 80004d0:	f000 ff06 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80004d4:	4628      	mov	r0, r5
 80004d6:	f000 ff03 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 80004da:	2004      	movs	r0, #4
 80004dc:	f000 ff00 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 80004e0:	2006      	movs	r0, #6
 80004e2:	f000 fefd 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 80004e6:	2007      	movs	r0, #7
 80004e8:	f000 fefa 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 80004ec:	2005      	movs	r0, #5
 80004ee:	f000 fef7 	bl	80012e0 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80004f2:	2003      	movs	r0, #3
 80004f4:	f000 fef4 	bl	80012e0 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI); 
 80004f8:	4620      	mov	r0, r4
 80004fa:	4631      	mov	r1, r6
 80004fc:	f000 ffa0 	bl	8001440 <BSP_PB_Init>
  
  /* Toggle LEDs between each Test */
  while (!UserPressButton) Toggle_Leds();
 8000500:	4d13      	ldr	r5, [pc, #76]	; (8000550 <main+0xc8>)
 8000502:	782b      	ldrb	r3, [r5, #0]
 8000504:	b913      	cbnz	r3, 800050c <main+0x84>
 8000506:	f7ff ff8b 	bl	8000420 <Toggle_Leds>
 800050a:	e7f9      	b.n	8000500 <main+0x78>
  BSP_LED_Off(LED3);
 800050c:	2000      	movs	r0, #0
 800050e:	f000 ff7b 	bl	8001408 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8000512:	2001      	movs	r0, #1
 8000514:	f000 ff78 	bl	8001408 <BSP_LED_Off>

  /* 1. Start Test: Wait For User inputs -------------------------------------*/
  while (1)
  {
    UserPressButton = 0;
    BSP_examples[DemoIndex++].DemoFunc();
 8000518:	4c0e      	ldr	r4, [pc, #56]	; (8000554 <main+0xcc>)
  
  /* Toggle LEDs between each Test */
  while (!UserPressButton) Toggle_Leds();
  BSP_LED_Off(LED3);
  BSP_LED_Off(LED4);
  BSP_LED_Off(LED5);
 800051a:	2002      	movs	r0, #2
 800051c:	f000 ff74 	bl	8001408 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 ff71 	bl	8001408 <BSP_LED_Off>

  /* 1. Start Test: Wait For User inputs -------------------------------------*/
  while (1)
  {
    UserPressButton = 0;
    BSP_examples[DemoIndex++].DemoFunc();
 8000526:	7823      	ldrb	r3, [r4, #0]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	7022      	strb	r2, [r4, #0]
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	4353      	muls	r3, r2
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <main+0xd0>)
  BSP_LED_Off(LED6);

  /* 1. Start Test: Wait For User inputs -------------------------------------*/
  while (1)
  {
    UserPressButton = 0;
 8000532:	2600      	movs	r6, #0
    BSP_examples[DemoIndex++].DemoFunc();
 8000534:	58d3      	ldr	r3, [r2, r3]
  BSP_LED_Off(LED6);

  /* 1. Start Test: Wait For User inputs -------------------------------------*/
  while (1)
  {
    UserPressButton = 0;
 8000536:	702e      	strb	r6, [r5, #0]
    BSP_examples[DemoIndex++].DemoFunc();
 8000538:	4798      	blx	r3

    /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 800053a:	7823      	ldrb	r3, [r4, #0]
    {
      DemoIndex = 0;
    }
    /* Toggle LEDs between each Test */
    UserPressButton = 0;
 800053c:	702e      	strb	r6, [r5, #0]
  {
    UserPressButton = 0;
    BSP_examples[DemoIndex++].DemoFunc();

    /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 800053e:	2b01      	cmp	r3, #1
    {
      DemoIndex = 0;
 8000540:	bf88      	it	hi
 8000542:	7026      	strbhi	r6, [r4, #0]
    }
    /* Toggle LEDs between each Test */
    UserPressButton = 0;
    while (!UserPressButton) Toggle_Leds();
 8000544:	782b      	ldrb	r3, [r5, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1e0      	bne.n	800050c <main+0x84>
 800054a:	f7ff ff69 	bl	8000420 <Toggle_Leds>
 800054e:	e7f9      	b.n	8000544 <main+0xbc>
 8000550:	20000548 	.word	0x20000548
 8000554:	20000549 	.word	0x20000549
 8000558:	20000428 	.word	0x20000428

0800055c <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 800055c:	2007      	movs	r0, #7
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800055e:	b508      	push	{r3, lr}
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8000560:	f000 ff44 	bl	80013ec <BSP_LED_On>
    BSP_LED_On(LED3);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 ff41 	bl	80013ec <BSP_LED_On>
 800056a:	e7fe      	b.n	800056a <Error_Handler+0xe>

0800056c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <SystemInit+0x58>)
 800056e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000572:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000576:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <SystemInit+0x5c>)
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	f041 0101 	orr.w	r1, r1, #1
 8000582:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000584:	6858      	ldr	r0, [r3, #4]
 8000586:	4911      	ldr	r1, [pc, #68]	; (80005cc <SystemInit+0x60>)
 8000588:	4001      	ands	r1, r0
 800058a:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000592:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000596:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800059e:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005a0:	6859      	ldr	r1, [r3, #4]
 80005a2:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80005a6:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80005a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005aa:	f021 010f 	bic.w	r1, r1, #15
 80005ae:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80005b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005b2:	4907      	ldr	r1, [pc, #28]	; (80005d0 <SystemInit+0x64>)
 80005b4:	4001      	ands	r1, r0
 80005b6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005b8:	2100      	movs	r1, #0
 80005ba:	6099      	str	r1, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005c0:	6093      	str	r3, [r2, #8]
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	40021000 	.word	0x40021000
 80005cc:	f87fc00c 	.word	0xf87fc00c
 80005d0:	ff00fccc 	.word	0xff00fccc

080005d4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80005d4:	4770      	bx	lr

080005d6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005d6:	e7fe      	b.n	80005d6 <HardFault_Handler>

080005d8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005d8:	e7fe      	b.n	80005d8 <MemManage_Handler>

080005da <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005da:	e7fe      	b.n	80005da <BusFault_Handler>

080005dc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005dc:	e7fe      	b.n	80005dc <UsageFault_Handler>

080005de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005e0:	4770      	bx	lr

080005e2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80005e4:	f000 bc62 	b.w	8000eac <HAL_IncTick>

080005e8 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 bdc3 	b.w	8001174 <HAL_GPIO_EXTI_IRQHandler>
	...

080005f0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005f6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005f8:	d404      	bmi.n	8000604 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	079d      	lsls	r5, r3, #30
 80005fe:	f100 80a9 	bmi.w	8000754 <HAL_RCC_OscConfig+0x164>
 8000602:	e123      	b.n	800084c <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000604:	4bbd      	ldr	r3, [pc, #756]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	f002 020c 	and.w	r2, r2, #12
 800060c:	2a04      	cmp	r2, #4
 800060e:	d007      	beq.n	8000620 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	f002 020c 	and.w	r2, r2, #12
 8000616:	2a08      	cmp	r2, #8
 8000618:	d119      	bne.n	800064e <HAL_RCC_OscConfig+0x5e>
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	03d8      	lsls	r0, r3, #15
 800061e:	d516      	bpl.n	800064e <HAL_RCC_OscConfig+0x5e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000624:	fa93 f3a3 	rbit	r3, r3
 8000628:	4bb4      	ldr	r3, [pc, #720]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000630:	fa93 f3a3 	rbit	r3, r3
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	f003 031f 	and.w	r3, r3, #31
 800063c:	fa22 f303 	lsr.w	r3, r2, r3
 8000640:	07d9      	lsls	r1, r3, #31
 8000642:	d5da      	bpl.n	80005fa <HAL_RCC_OscConfig+0xa>
 8000644:	6863      	ldr	r3, [r4, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1d7      	bne.n	80005fa <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800064a:	2001      	movs	r0, #1
 800064c:	e299      	b.n	8000b82 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800064e:	4bab      	ldr	r3, [pc, #684]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800065e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000660:	f000 fc2c 	bl	8000ebc <HAL_GetTick>
 8000664:	4605      	mov	r5, r0
 8000666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066a:	fa93 f3a3 	rbit	r3, r3
 800066e:	4ba3      	ldr	r3, [pc, #652]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000676:	fa93 f3a3 	rbit	r3, r3
 800067a:	fab3 f383 	clz	r3, r3
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	fa22 f303 	lsr.w	r3, r2, r3
 8000686:	07da      	lsls	r2, r3, #31
 8000688:	d508      	bpl.n	800069c <HAL_RCC_OscConfig+0xac>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800068a:	f000 fc17 	bl	8000ebc <HAL_GetTick>
 800068e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	4298      	cmp	r0, r3
 8000696:	d9e6      	bls.n	8000666 <HAL_RCC_OscConfig+0x76>
        {
          return HAL_TIMEOUT;
 8000698:	2003      	movs	r0, #3
 800069a:	e272      	b.n	8000b82 <HAL_RCC_OscConfig+0x592>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800069c:	6862      	ldr	r2, [r4, #4]
 800069e:	4b97      	ldr	r3, [pc, #604]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 80006a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80006a4:	d007      	beq.n	80006b6 <HAL_RCC_OscConfig+0xc6>
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	b14a      	cbz	r2, 80006be <HAL_RCC_OscConfig+0xce>
 80006aa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80006ae:	d106      	bne.n	80006be <HAL_RCC_OscConfig+0xce>
 80006b0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80006b4:	6019      	str	r1, [r3, #0]
 80006b6:	6819      	ldr	r1, [r3, #0]
 80006b8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80006bc:	e005      	b.n	80006ca <HAL_RCC_OscConfig+0xda>
 80006be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80006c2:	6019      	str	r1, [r3, #0]
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80006ca:	6019      	str	r1, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006cc:	4b8b      	ldr	r3, [pc, #556]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 80006ce:	68a1      	ldr	r1, [r4, #8]
 80006d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006d2:	f020 000f 	bic.w	r0, r0, #15
 80006d6:	4301      	orrs	r1, r0
 80006d8:	62d9      	str	r1, [r3, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006da:	b1ea      	cbz	r2, 8000718 <HAL_RCC_OscConfig+0x128>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006dc:	f000 fbee 	bl	8000ebc <HAL_GetTick>
 80006e0:	4605      	mov	r5, r0
 80006e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006e6:	fa93 f3a3 	rbit	r3, r3
 80006ea:	4b84      	ldr	r3, [pc, #528]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006f2:	fa93 f3a3 	rbit	r3, r3
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	f003 031f 	and.w	r3, r3, #31
 80006fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000702:	07db      	lsls	r3, r3, #31
 8000704:	f53f af79 	bmi.w	80005fa <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000708:	f000 fbd8 	bl	8000ebc <HAL_GetTick>
 800070c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000710:	1b40      	subs	r0, r0, r5
 8000712:	4298      	cmp	r0, r3
 8000714:	d9e5      	bls.n	80006e2 <HAL_RCC_OscConfig+0xf2>
 8000716:	e7bf      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000718:	f000 fbd0 	bl	8000ebc <HAL_GetTick>
 800071c:	4605      	mov	r5, r0
 800071e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000722:	fa93 f3a3 	rbit	r3, r3
 8000726:	4b75      	ldr	r3, [pc, #468]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	fab3 f383 	clz	r3, r3
 8000736:	f003 031f 	and.w	r3, r3, #31
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
 800073e:	07d8      	lsls	r0, r3, #31
 8000740:	f57f af5b 	bpl.w	80005fa <HAL_RCC_OscConfig+0xa>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000744:	f000 fbba 	bl	8000ebc <HAL_GetTick>
 8000748:	f241 3388 	movw	r3, #5000	; 0x1388
 800074c:	1b40      	subs	r0, r0, r5
 800074e:	4298      	cmp	r0, r3
 8000750:	d9e5      	bls.n	800071e <HAL_RCC_OscConfig+0x12e>
 8000752:	e7a1      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000754:	4b69      	ldr	r3, [pc, #420]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	f012 0f0c 	tst.w	r2, #12
 800075c:	d007      	beq.n	800076e <HAL_RCC_OscConfig+0x17e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	f002 020c 	and.w	r2, r2, #12
 8000764:	2a08      	cmp	r2, #8
 8000766:	d117      	bne.n	8000798 <HAL_RCC_OscConfig+0x1a8>
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	03d9      	lsls	r1, r3, #15
 800076c:	d414      	bmi.n	8000798 <HAL_RCC_OscConfig+0x1a8>
 800076e:	2302      	movs	r3, #2
 8000770:	fa93 f3a3 	rbit	r3, r3
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2302      	movs	r3, #2
 800077a:	fa93 f3a3 	rbit	r3, r3
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	fa22 f303 	lsr.w	r3, r2, r3
 800078a:	07da      	lsls	r2, r3, #31
 800078c:	d52b      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x1f6>
 800078e:	6923      	ldr	r3, [r4, #16]
 8000790:	2b01      	cmp	r3, #1
 8000792:	f47f af5a 	bne.w	800064a <HAL_RCC_OscConfig+0x5a>
 8000796:	e026      	b.n	80007e6 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000798:	6922      	ldr	r2, [r4, #16]
 800079a:	2301      	movs	r3, #1
 800079c:	b392      	cbz	r2, 8000804 <HAL_RCC_OscConfig+0x214>
 800079e:	fa93 f3a3 	rbit	r3, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80007ac:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007b4:	f000 fb82 	bl	8000ebc <HAL_GetTick>
 80007b8:	4605      	mov	r5, r0
 80007ba:	2302      	movs	r3, #2
 80007bc:	fa93 f3a3 	rbit	r3, r3
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	fab3 f383 	clz	r3, r3
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	fa22 f303 	lsr.w	r3, r2, r3
 80007d6:	07db      	lsls	r3, r3, #31
 80007d8:	d405      	bmi.n	80007e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007da:	f000 fb6f 	bl	8000ebc <HAL_GetTick>
 80007de:	1b40      	subs	r0, r0, r5
 80007e0:	2864      	cmp	r0, #100	; 0x64
 80007e2:	d9ea      	bls.n	80007ba <HAL_RCC_OscConfig+0x1ca>
 80007e4:	e758      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 80007e8:	21f8      	movs	r1, #248	; 0xf8
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	fa91 f1a1 	rbit	r1, r1
 80007f0:	6963      	ldr	r3, [r4, #20]
 80007f2:	fab1 f181 	clz	r1, r1
 80007f6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80007fa:	408b      	lsls	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e023      	b.n	800084c <HAL_RCC_OscConfig+0x25c>
 8000804:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000812:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800081a:	f000 fb4f 	bl	8000ebc <HAL_GetTick>
 800081e:	4605      	mov	r5, r0
 8000820:	2302      	movs	r3, #2
 8000822:	fa93 f3a3 	rbit	r3, r3
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	fa93 f3a3 	rbit	r3, r3
 8000830:	fab3 f383 	clz	r3, r3
 8000834:	f003 031f 	and.w	r3, r3, #31
 8000838:	fa22 f303 	lsr.w	r3, r2, r3
 800083c:	07d8      	lsls	r0, r3, #31
 800083e:	d505      	bpl.n	800084c <HAL_RCC_OscConfig+0x25c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000840:	f000 fb3c 	bl	8000ebc <HAL_GetTick>
 8000844:	1b40      	subs	r0, r0, r5
 8000846:	2864      	cmp	r0, #100	; 0x64
 8000848:	d9ea      	bls.n	8000820 <HAL_RCC_OscConfig+0x230>
 800084a:	e725      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	0719      	lsls	r1, r3, #28
 8000850:	d404      	bmi.n	800085c <HAL_RCC_OscConfig+0x26c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	075a      	lsls	r2, r3, #29
 8000856:	f140 80aa 	bpl.w	80009ae <HAL_RCC_OscConfig+0x3be>
 800085a:	e053      	b.n	8000904 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800085c:	69a1      	ldr	r1, [r4, #24]
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <HAL_RCC_OscConfig+0x310>)
 8000860:	2201      	movs	r2, #1
 8000862:	b329      	cbz	r1, 80008b0 <HAL_RCC_OscConfig+0x2c0>
 8000864:	fa92 f2a2 	rbit	r2, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000868:	fab2 f282 	clz	r2, r2
 800086c:	2101      	movs	r1, #1
 800086e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000872:	f000 fb23 	bl	8000ebc <HAL_GetTick>
 8000876:	4605      	mov	r5, r0
 8000878:	2302      	movs	r3, #2
 800087a:	fa93 f3a3 	rbit	r3, r3
 800087e:	2302      	movs	r3, #2
 8000880:	fa93 f3a3 	rbit	r3, r3
 8000884:	2302      	movs	r3, #2
 8000886:	fa93 f3a3 	rbit	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 800088c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800088e:	2302      	movs	r3, #2
 8000890:	fa93 f3a3 	rbit	r3, r3
 8000894:	fab3 f383 	clz	r3, r3
 8000898:	f003 031f 	and.w	r3, r3, #31
 800089c:	fa22 f303 	lsr.w	r3, r2, r3
 80008a0:	07db      	lsls	r3, r3, #31
 80008a2:	d4d6      	bmi.n	8000852 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008a4:	f000 fb0a 	bl	8000ebc <HAL_GetTick>
 80008a8:	1b40      	subs	r0, r0, r5
 80008aa:	2864      	cmp	r0, #100	; 0x64
 80008ac:	d9e4      	bls.n	8000878 <HAL_RCC_OscConfig+0x288>
 80008ae:	e6f3      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
 80008b0:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2100      	movs	r1, #0
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008be:	f000 fafd 	bl	8000ebc <HAL_GetTick>
 80008c2:	4605      	mov	r5, r0
 80008c4:	2302      	movs	r3, #2
 80008c6:	fa93 f3a3 	rbit	r3, r3
 80008ca:	2302      	movs	r3, #2
 80008cc:	fa93 f3a3 	rbit	r3, r3
 80008d0:	2302      	movs	r3, #2
 80008d2:	fa93 f3a3 	rbit	r3, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_RCC_OscConfig+0x30c>)
 80008d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008da:	2302      	movs	r3, #2
 80008dc:	fa93 f3a3 	rbit	r3, r3
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ec:	07d8      	lsls	r0, r3, #31
 80008ee:	d5b0      	bpl.n	8000852 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008f0:	f000 fae4 	bl	8000ebc <HAL_GetTick>
 80008f4:	1b40      	subs	r0, r0, r5
 80008f6:	2864      	cmp	r0, #100	; 0x64
 80008f8:	d9e4      	bls.n	80008c4 <HAL_RCC_OscConfig+0x2d4>
 80008fa:	e6cd      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
 80008fc:	40021000 	.word	0x40021000
 8000900:	42420480 	.word	0x42420480
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	4ba0      	ldr	r3, [pc, #640]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
 8000906:	69da      	ldr	r2, [r3, #28]
 8000908:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800090c:	61da      	str	r2, [r3, #28]
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000918:	4b9c      	ldr	r3, [pc, #624]	; (8000b8c <HAL_RCC_OscConfig+0x59c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000920:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000922:	f000 facb 	bl	8000ebc <HAL_GetTick>
 8000926:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000928:	4b98      	ldr	r3, [pc, #608]	; (8000b8c <HAL_RCC_OscConfig+0x59c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	05d9      	lsls	r1, r3, #23
 800092e:	d542      	bpl.n	80009b6 <HAL_RCC_OscConfig+0x3c6>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000930:	4b95      	ldr	r3, [pc, #596]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
 8000932:	6a1a      	ldr	r2, [r3, #32]
 8000934:	f022 0201 	bic.w	r2, r2, #1
 8000938:	621a      	str	r2, [r3, #32]
 800093a:	6a1a      	ldr	r2, [r3, #32]
 800093c:	f022 0204 	bic.w	r2, r2, #4
 8000940:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000942:	f000 fabb 	bl	8000ebc <HAL_GetTick>
 8000946:	4605      	mov	r5, r0
 8000948:	2302      	movs	r3, #2
 800094a:	fa93 f3a3 	rbit	r3, r3
 800094e:	2202      	movs	r2, #2
 8000950:	fa92 f2a2 	rbit	r2, r2
 8000954:	4b8c      	ldr	r3, [pc, #560]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000956:	2a00      	cmp	r2, #0
 8000958:	d033      	beq.n	80009c2 <HAL_RCC_OscConfig+0x3d2>
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2202      	movs	r2, #2
 800095e:	fa92 f2a2 	rbit	r2, r2
 8000962:	fab2 f282 	clz	r2, r2
 8000966:	f002 021f 	and.w	r2, r2, #31
 800096a:	40d3      	lsrs	r3, r2
 800096c:	07da      	lsls	r2, r3, #31
 800096e:	d42d      	bmi.n	80009cc <HAL_RCC_OscConfig+0x3dc>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000970:	68e2      	ldr	r2, [r4, #12]
 8000972:	4b85      	ldr	r3, [pc, #532]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
 8000974:	2a01      	cmp	r2, #1
 8000976:	d131      	bne.n	80009dc <HAL_RCC_OscConfig+0x3ec>
 8000978:	6a1a      	ldr	r2, [r3, #32]
 800097a:	f042 0201 	orr.w	r2, r2, #1
 800097e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000980:	f000 fa9c 	bl	8000ebc <HAL_GetTick>
 8000984:	4605      	mov	r5, r0
 8000986:	2302      	movs	r3, #2
 8000988:	fa93 f3a3 	rbit	r3, r3
 800098c:	2202      	movs	r2, #2
 800098e:	fa92 f2a2 	rbit	r2, r2
 8000992:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000994:	2a00      	cmp	r2, #0
 8000996:	d03c      	beq.n	8000a12 <HAL_RCC_OscConfig+0x422>
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	2202      	movs	r2, #2
 800099c:	fa92 f2a2 	rbit	r2, r2
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	f002 021f 	and.w	r2, r2, #31
 80009a8:	40d3      	lsrs	r3, r2
 80009aa:	07db      	lsls	r3, r3, #31
 80009ac:	d536      	bpl.n	8000a1c <HAL_RCC_OscConfig+0x42c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009ae:	69e3      	ldr	r3, [r4, #28]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d15c      	bne.n	8000a6e <HAL_RCC_OscConfig+0x47e>
 80009b4:	e0b1      	b.n	8000b1a <HAL_RCC_OscConfig+0x52a>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80009b6:	f000 fa81 	bl	8000ebc <HAL_GetTick>
 80009ba:	1b40      	subs	r0, r0, r5
 80009bc:	2864      	cmp	r0, #100	; 0x64
 80009be:	d9b3      	bls.n	8000928 <HAL_RCC_OscConfig+0x338>
 80009c0:	e66a      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
 80009c2:	2202      	movs	r2, #2
 80009c4:	fa92 f2a2 	rbit	r2, r2
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	e7c7      	b.n	800095c <HAL_RCC_OscConfig+0x36c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009cc:	f000 fa76 	bl	8000ebc <HAL_GetTick>
 80009d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d4:	1b40      	subs	r0, r0, r5
 80009d6:	4298      	cmp	r0, r3
 80009d8:	d9b6      	bls.n	8000948 <HAL_RCC_OscConfig+0x358>
 80009da:	e65d      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009dc:	b95a      	cbnz	r2, 80009f6 <HAL_RCC_OscConfig+0x406>
 80009de:	6a1a      	ldr	r2, [r3, #32]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	621a      	str	r2, [r3, #32]
 80009e6:	6a1a      	ldr	r2, [r3, #32]
 80009e8:	f022 0204 	bic.w	r2, r2, #4
 80009ec:	621a      	str	r2, [r3, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ee:	f000 fa65 	bl	8000ebc <HAL_GetTick>
 80009f2:	4605      	mov	r5, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f4:	e030      	b.n	8000a58 <HAL_RCC_OscConfig+0x468>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f6:	2a05      	cmp	r2, #5
 80009f8:	6a1a      	ldr	r2, [r3, #32]
 80009fa:	d103      	bne.n	8000a04 <HAL_RCC_OscConfig+0x414>
 80009fc:	f042 0204 	orr.w	r2, r2, #4
 8000a00:	621a      	str	r2, [r3, #32]
 8000a02:	e7b9      	b.n	8000978 <HAL_RCC_OscConfig+0x388>
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	621a      	str	r2, [r3, #32]
 8000a0a:	6a1a      	ldr	r2, [r3, #32]
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	e7b5      	b.n	800097e <HAL_RCC_OscConfig+0x38e>
 8000a12:	2202      	movs	r2, #2
 8000a14:	fa92 f2a2 	rbit	r2, r2
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1a:	e7be      	b.n	800099a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1c:	f000 fa4e 	bl	8000ebc <HAL_GetTick>
 8000a20:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a24:	1b40      	subs	r0, r0, r5
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d9ad      	bls.n	8000986 <HAL_RCC_OscConfig+0x396>
 8000a2a:	e635      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	fa92 f2a2 	rbit	r2, r2
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a34:	2202      	movs	r2, #2
 8000a36:	fa92 f2a2 	rbit	r2, r2
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	f002 021f 	and.w	r2, r2, #31
 8000a42:	40d3      	lsrs	r3, r2
 8000a44:	07d8      	lsls	r0, r3, #31
 8000a46:	d5b2      	bpl.n	80009ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a48:	f000 fa38 	bl	8000ebc <HAL_GetTick>
 8000a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a50:	1b40      	subs	r0, r0, r5
 8000a52:	4298      	cmp	r0, r3
 8000a54:	f63f ae20 	bhi.w	8000698 <HAL_RCC_OscConfig+0xa8>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	2202      	movs	r2, #2
 8000a60:	fa92 f2a2 	rbit	r2, r2
 8000a64:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d0e0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x43c>
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	e7e2      	b.n	8000a34 <HAL_RCC_OscConfig+0x444>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
 8000a70:	6852      	ldr	r2, [r2, #4]
 8000a72:	f002 020c 	and.w	r2, r2, #12
 8000a76:	2a08      	cmp	r2, #8
 8000a78:	f43f ade7 	beq.w	800064a <HAL_RCC_OscConfig+0x5a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a82:	d158      	bne.n	8000b36 <HAL_RCC_OscConfig+0x546>
 8000a84:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a88:	fab3 f383 	clz	r3, r3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a92:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9a:	f000 fa0f 	bl	8000ebc <HAL_GetTick>
 8000a9e:	4605      	mov	r5, r0
 8000aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa4:	fa93 f3a3 	rbit	r3, r3
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab0:	fa93 f3a3 	rbit	r3, r3
 8000ab4:	fab3 f383 	clz	r3, r3
 8000ab8:	f003 031f 	and.w	r3, r3, #31
 8000abc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac0:	07d9      	lsls	r1, r3, #31
 8000ac2:	d42c      	bmi.n	8000b1e <HAL_RCC_OscConfig+0x52e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
 8000ac6:	6a20      	ldr	r0, [r4, #32]
 8000ac8:	6859      	ldr	r1, [r3, #4]
 8000aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000acc:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
 8000ad0:	4302      	orrs	r2, r0
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ada:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ae8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f000 f9e4 	bl	8000ebc <HAL_GetTick>
 8000af4:	4604      	mov	r4, r0
 8000af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afa:	fa93 f3a3 	rbit	r3, r3
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b06:	fa93 f3a3 	rbit	r3, r3
 8000b0a:	fab3 f383 	clz	r3, r3
 8000b0e:	f003 031f 	and.w	r3, r3, #31
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	07da      	lsls	r2, r3, #31
 8000b18:	d507      	bpl.n	8000b2a <HAL_RCC_OscConfig+0x53a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e031      	b.n	8000b82 <HAL_RCC_OscConfig+0x592>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1e:	f000 f9cd 	bl	8000ebc <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2864      	cmp	r0, #100	; 0x64
 8000b26:	d9bb      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x4b0>
 8000b28:	e5b6      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b2a:	f000 f9c7 	bl	8000ebc <HAL_GetTick>
 8000b2e:	1b00      	subs	r0, r0, r4
 8000b30:	2864      	cmp	r0, #100	; 0x64
 8000b32:	d9e0      	bls.n	8000af6 <HAL_RCC_OscConfig+0x506>
 8000b34:	e5b0      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
 8000b36:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000b44:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4c:	f000 f9b6 	bl	8000ebc <HAL_GetTick>
 8000b50:	4604      	mov	r4, r0
 8000b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b62:	fa93 f3a3 	rbit	r3, r3
 8000b66:	fab3 f383 	clz	r3, r3
 8000b6a:	f003 031f 	and.w	r3, r3, #31
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	07db      	lsls	r3, r3, #31
 8000b74:	d5d1      	bpl.n	8000b1a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f000 f9a1 	bl	8000ebc <HAL_GetTick>
 8000b7a:	1b00      	subs	r0, r0, r4
 8000b7c:	2864      	cmp	r0, #100	; 0x64
 8000b7e:	d9e8      	bls.n	8000b52 <HAL_RCC_OscConfig+0x562>
 8000b80:	e58a      	b.n	8000698 <HAL_RCC_OscConfig+0xa8>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000b82:	b003      	add	sp, #12
 8000b84:	bd30      	pop	{r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40007000 	.word	0x40007000

08000b90 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b90:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <HAL_RCC_ClockConfig+0x230>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f002 0207 	and.w	r2, r2, #7
 8000b98:	4291      	cmp	r1, r2
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b9a:	b570      	push	{r4, r5, r6, lr}
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba0:	f240 8084 	bls.w	8000cac <HAL_RCC_ClockConfig+0x11c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f022 0207 	bic.w	r2, r2, #7
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d001      	beq.n	8000bbc <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8000bb8:	2001      	movs	r0, #1
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bbc:	6803      	ldr	r3, [r0, #0]
 8000bbe:	079d      	lsls	r5, r3, #30
 8000bc0:	d506      	bpl.n	8000bd0 <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bc2:	4a80      	ldr	r2, [pc, #512]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000bc4:	68a1      	ldr	r1, [r4, #8]
 8000bc6:	6850      	ldr	r0, [r2, #4]
 8000bc8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8000bcc:	4301      	orrs	r1, r0
 8000bce:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd0:	07d8      	lsls	r0, r3, #31
 8000bd2:	d40b      	bmi.n	8000bec <HAL_RCC_ClockConfig+0x5c>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	0759      	lsls	r1, r3, #29
 8000bd8:	f140 80e2 	bpl.w	8000da0 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000bde:	68e1      	ldr	r1, [r4, #12]
 8000be0:	6850      	ldr	r0, [r2, #4]
 8000be2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000be6:	4301      	orrs	r1, r0
 8000be8:	6051      	str	r1, [r2, #4]
 8000bea:	e0d9      	b.n	8000da0 <HAL_RCC_ClockConfig+0x210>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d108      	bne.n	8000c04 <HAL_RCC_ClockConfig+0x74>
 8000bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bf6:	fa92 f2a2 	rbit	r2, r2
 8000bfa:	4a72      	ldr	r2, [pc, #456]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	6811      	ldr	r1, [r2, #0]
 8000bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c02:	e010      	b.n	8000c26 <HAL_RCC_ClockConfig+0x96>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d108      	bne.n	8000c1a <HAL_RCC_ClockConfig+0x8a>
 8000c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c0c:	fa92 f2a2 	rbit	r2, r2
 8000c10:	4a6c      	ldr	r2, [pc, #432]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c12:	6811      	ldr	r1, [r2, #0]
 8000c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c18:	e005      	b.n	8000c26 <HAL_RCC_ClockConfig+0x96>
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	fa92 f2a2 	rbit	r2, r2
 8000c20:	4a68      	ldr	r2, [pc, #416]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c22:	6811      	ldr	r1, [r2, #0]
 8000c24:	2202      	movs	r2, #2
 8000c26:	fa92 f2a2 	rbit	r2, r2
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	f002 021f 	and.w	r2, r2, #31
 8000c32:	fa21 f202 	lsr.w	r2, r1, r2
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	d5be      	bpl.n	8000bb8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c3a:	4a62      	ldr	r2, [pc, #392]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000c3c:	6851      	ldr	r1, [r2, #4]
 8000c3e:	f021 0103 	bic.w	r1, r1, #3
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6053      	str	r3, [r2, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c46:	f000 f939 	bl	8000ebc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c4a:	6863      	ldr	r3, [r4, #4]
 8000c4c:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4e:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c50:	d10e      	bne.n	8000c70 <HAL_RCC_ClockConfig+0xe0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c52:	4b5c      	ldr	r3, [pc, #368]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d0ba      	beq.n	8000bd4 <HAL_RCC_ClockConfig+0x44>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c5e:	f000 f92d 	bl	8000ebc <HAL_GetTick>
 8000c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	d9f2      	bls.n	8000c52 <HAL_RCC_ClockConfig+0xc2>
          {
            return HAL_TIMEOUT;
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d00c      	beq.n	8000c8e <HAL_RCC_ClockConfig+0xfe>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c74:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f013 0f0c 	tst.w	r3, #12
 8000c7c:	d10e      	bne.n	8000c9c <HAL_RCC_ClockConfig+0x10c>
 8000c7e:	e7a9      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x44>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c80:	f000 f91c 	bl	8000ebc <HAL_GetTick>
 8000c84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c88:	1b40      	subs	r0, r0, r5
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d8ee      	bhi.n	8000c6c <HAL_RCC_ClockConfig+0xdc>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d1f2      	bne.n	8000c80 <HAL_RCC_ClockConfig+0xf0>
 8000c9a:	e79b      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x44>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9c:	f000 f90e 	bl	8000ebc <HAL_GetTick>
 8000ca0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ca4:	1b40      	subs	r0, r0, r5
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d9e4      	bls.n	8000c74 <HAL_RCC_ClockConfig+0xe4>
 8000caa:	e7df      	b.n	8000c6c <HAL_RCC_ClockConfig+0xdc>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cac:	6803      	ldr	r3, [r0, #0]
 8000cae:	079e      	lsls	r6, r3, #30
 8000cb0:	d506      	bpl.n	8000cc0 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb2:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000cb4:	68a1      	ldr	r1, [r4, #8]
 8000cb6:	6850      	ldr	r0, [r2, #4]
 8000cb8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8000cbc:	4301      	orrs	r1, r0
 8000cbe:	6051      	str	r1, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cc0:	07d8      	lsls	r0, r3, #31
 8000cc2:	d40c      	bmi.n	8000cde <HAL_RCC_ClockConfig+0x14e>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_RCC_ClockConfig+0x230>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f022 0207 	bic.w	r2, r2, #7
 8000ccc:	432a      	orrs	r2, r5
 8000cce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	f47f af6e 	bne.w	8000bb8 <HAL_RCC_ClockConfig+0x28>
 8000cdc:	e77a      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x44>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cde:	6863      	ldr	r3, [r4, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d108      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x166>
 8000ce4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce8:	fa92 f2a2 	rbit	r2, r2
 8000cec:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	6811      	ldr	r1, [r2, #0]
 8000cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cf4:	e010      	b.n	8000d18 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d108      	bne.n	8000d0c <HAL_RCC_ClockConfig+0x17c>
 8000cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cfe:	fa92 f2a2 	rbit	r2, r2
 8000d02:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d04:	6811      	ldr	r1, [r2, #0]
 8000d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d0a:	e005      	b.n	8000d18 <HAL_RCC_ClockConfig+0x188>
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	fa92 f2a2 	rbit	r2, r2
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	2202      	movs	r2, #2
 8000d18:	fa92 f2a2 	rbit	r2, r2
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	f002 021f 	and.w	r2, r2, #31
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	07d1      	lsls	r1, r2, #31
 8000d2a:	f57f af45 	bpl.w	8000bb8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2e:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000d30:	6851      	ldr	r1, [r2, #4]
 8000d32:	f021 0103 	bic.w	r1, r1, #3
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6053      	str	r3, [r2, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3a:	f000 f8bf 	bl	8000ebc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d3e:	6863      	ldr	r3, [r4, #4]
 8000d40:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d42:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d44:	d10d      	bne.n	8000d62 <HAL_RCC_ClockConfig+0x1d2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d0b8      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d52:	f000 f8b3 	bl	8000ebc <HAL_GetTick>
 8000d56:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d5a:	1b80      	subs	r0, r0, r6
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	d9f2      	bls.n	8000d46 <HAL_RCC_ClockConfig+0x1b6>
 8000d60:	e784      	b.n	8000c6c <HAL_RCC_ClockConfig+0xdc>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d00d      	beq.n	8000d82 <HAL_RCC_ClockConfig+0x1f2>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f013 0f0c 	tst.w	r3, #12
 8000d6e:	d10f      	bne.n	8000d90 <HAL_RCC_ClockConfig+0x200>
 8000d70:	e7a8      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x134>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d72:	f000 f8a3 	bl	8000ebc <HAL_GetTick>
 8000d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d7a:	1b80      	subs	r0, r0, r6
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f63f af75 	bhi.w	8000c6c <HAL_RCC_ClockConfig+0xdc>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d1f1      	bne.n	8000d72 <HAL_RCC_ClockConfig+0x1e2>
 8000d8e:	e799      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x134>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d90:	f000 f894 	bl	8000ebc <HAL_GetTick>
 8000d94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d9e3      	bls.n	8000d66 <HAL_RCC_ClockConfig+0x1d6>
 8000d9e:	e765      	b.n	8000c6c <HAL_RCC_ClockConfig+0xdc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da0:	071a      	lsls	r2, r3, #28
 8000da2:	d507      	bpl.n	8000db4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_RCC_ClockConfig+0x234>)
 8000da6:	6921      	ldr	r1, [r4, #16]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000dae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000db2:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000db4:	200f      	movs	r0, #15
 8000db6:	f000 f854 	bl	8000e62 <HAL_InitTick>
  
  return HAL_OK;
 8000dba:	2000      	movs	r0, #0
}
 8000dbc:	bd70      	pop	{r4, r5, r6, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x50>)
 8000dca:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dcc:	f003 010c 	and.w	r1, r3, #12
 8000dd0:	2908      	cmp	r1, #8
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	d11e      	bne.n	8000e14 <HAL_RCC_GetSysClockFreq+0x4c>
 8000dd6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000dda:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000dde:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	fa20 f202 	lsr.w	r2, r0, r2
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000dec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000dee:	5c82      	ldrb	r2, [r0, r2]
 8000df0:	200f      	movs	r0, #15
 8000df2:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000df6:	fab0 f080 	clz	r0, r0
 8000dfa:	f001 010f 	and.w	r1, r1, #15
 8000dfe:	40c1      	lsrs	r1, r0
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <HAL_RCC_GetSysClockFreq+0x58>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000e02:	03db      	lsls	r3, r3, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000e04:	5c41      	ldrb	r1, [r0, r1]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e06:	bf4a      	itet	mi
 8000e08:	4806      	ldrmi	r0, [pc, #24]	; (8000e24 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000e0a:	4807      	ldrpl	r0, [pc, #28]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e0c:	fbb0 f0f1 	udivmi	r0, r0, r1
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000e10:	4350      	muls	r0, r2
 8000e12:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	08002838 	.word	0x08002838
 8000e20:	08002828 	.word	0x08002828
 8000e24:	007a1200 	.word	0x007a1200
 8000e28:	003d0900 	.word	0x003d0900

08000e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e2c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000e2e:	f7ff ffcb 	bl	8000dc8 <HAL_RCC_GetSysClockFreq>
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_RCC_GetHCLKFreq+0x28>)
 8000e34:	22f0      	movs	r2, #240	; 0xf0
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	fa92 f2a2 	rbit	r2, r2
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e44:	40d3      	lsrs	r3, r2
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	40d8      	lsrs	r0, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_RCC_GetHCLKFreq+0x30>)
 8000e4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000e50:	bd08      	pop	{r3, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	08002848 	.word	0x08002848
 8000e5c:	200004a0 	.word	0x200004a0

08000e60 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000e60:	4770      	bx	lr

08000e62 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e62:	b510      	push	{r4, lr}
 8000e64:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e66:	f7ff ffe1 	bl	8000e2c <HAL_RCC_GetHCLKFreq>
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e72:	f000 f887 	bl	8000f84 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f000 f843 	bl	8000f08 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e82:	2000      	movs	r0, #0
 8000e84:	bd10      	pop	{r4, pc}
	...

08000e88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_Init+0x20>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f825 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff ffe1 	bl	8000e62 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	bd08      	pop	{r3, pc}
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_IncTick+0xc>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	3201      	adds	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2000054c 	.word	0x2000054c

08000ebc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <HAL_GetTick+0x8>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000054c 	.word	0x2000054c

08000ec8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000ec8:	b513      	push	{r0, r1, r4, lr}
 8000eca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff fff6 	bl	8000ebc <HAL_GetTick>
 8000ed0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ed2:	f7ff fff3 	bl	8000ebc <HAL_GetTick>
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	1b00      	subs	r0, r0, r4
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d3f9      	bcc.n	8000ed2 <HAL_Delay+0xa>
  {
  }
}
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd10      	pop	{r4, pc}
	...

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ee6:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef6:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000efa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000efe:	60d3      	str	r3, [r2, #12]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_NVIC_SetPriority+0x5c>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	f1c3 0407 	rsb	r4, r3, #7
 8000f18:	2c04      	cmp	r4, #4
 8000f1a:	bf28      	it	cs
 8000f1c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f24:	bf8c      	ite	hi
 8000f26:	3b03      	subhi	r3, #3
 8000f28:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2a:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2e:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f32:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f36:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000f3e:	4313      	orrs	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
 8000f40:	2800      	cmp	r0, #0
 8000f42:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f46:	da05      	bge.n	8000f54 <HAL_NVIC_SetPriority+0x4c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	f000 000f 	and.w	r0, r0, #15
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_NVIC_SetPriority+0x60>)
 8000f50:	541a      	strb	r2, [r3, r0]
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	e000ed14 	.word	0xe000ed14

08000f6c <HAL_NVIC_EnableIRQ>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f6c:	0942      	lsrs	r2, r0, #5
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f000 001f 	and.w	r0, r0, #31
 8000f74:	fa03 f000 	lsl.w	r0, r3, r0
 8000f78:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <HAL_NVIC_EnableIRQ+0x14>)
 8000f7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000f84:	3801      	subs	r0, #1
 8000f86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f8a:	d20a      	bcs.n	8000fa2 <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	21f0      	movs	r1, #240	; 0xf0
 8000f94:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	2207      	movs	r2, #7
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4770      	bx	lr
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000fa2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8000fb4:	680f      	ldr	r7, [r1, #0]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000fb6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8000fb8:	fa37 f203 	lsrs.w	r2, r7, r3
 8000fbc:	f000 80c0 	beq.w	8001140 <HAL_GPIO_Init+0x190>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8000fc0:	2401      	movs	r4, #1
 8000fc2:	409c      	lsls	r4, r3

    if(iocurrent)
 8000fc4:	403c      	ands	r4, r7
 8000fc6:	f000 80b9 	beq.w	800113c <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fca:	684a      	ldr	r2, [r1, #4]
 8000fcc:	f022 0610 	bic.w	r6, r2, #16
 8000fd0:	2e02      	cmp	r6, #2
 8000fd2:	d116      	bne.n	8001002 <HAL_GPIO_Init+0x52>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fd4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000fd8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fdc:	f003 0807 	and.w	r8, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fe0:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fe4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000fe8:	f04f 090f 	mov.w	r9, #15
 8000fec:	fa09 f908 	lsl.w	r9, r9, r8
 8000ff0:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ff4:	690d      	ldr	r5, [r1, #16]
 8000ff6:	fa05 f808 	lsl.w	r8, r5, r8
 8000ffa:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8000ffe:	f8cc 5020 	str.w	r5, [ip, #32]
 8001002:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001004:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800100c:	fa0c fc05 	lsl.w	ip, ip, r5
 8001010:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001014:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001018:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800101c:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001020:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001022:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001026:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8001028:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102c:	d815      	bhi.n	800105a <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001030:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001034:	68ce      	ldr	r6, [r1, #12]
 8001036:	40ae      	lsls	r6, r5
 8001038:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 800103c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	f04f 0801 	mov.w	r8, #1
 8001044:	fa08 f803 	lsl.w	r8, r8, r3
 8001048:	ea26 0608 	bic.w	r6, r6, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800104c:	f3c2 1800 	ubfx	r8, r2, #4, #1
 8001050:	fa08 f803 	lsl.w	r8, r8, r3
 8001054:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8001058:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800105a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800105c:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001060:	688e      	ldr	r6, [r1, #8]
 8001062:	40ae      	lsls	r6, r5
 8001064:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 8001068:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106a:	00d5      	lsls	r5, r2, #3
 800106c:	d566      	bpl.n	800113c <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4d36      	ldr	r5, [pc, #216]	; (8001148 <HAL_GPIO_Init+0x198>)
 8001070:	69ae      	ldr	r6, [r5, #24]
 8001072:	f046 0601 	orr.w	r6, r6, #1
 8001076:	61ae      	str	r6, [r5, #24]
 8001078:	69ad      	ldr	r5, [r5, #24]
 800107a:	f023 0603 	bic.w	r6, r3, #3
 800107e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001082:	f005 0501 	and.w	r5, r5, #1
 8001086:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800108a:	9501      	str	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800108c:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	9d01      	ldr	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001092:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001094:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001098:	f04f 080f 	mov.w	r8, #15
 800109c:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80010a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010a4:	ea25 0808 	bic.w	r8, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80010a8:	d011      	beq.n	80010ce <HAL_GPIO_Init+0x11e>
 80010aa:	4d28      	ldr	r5, [pc, #160]	; (800114c <HAL_GPIO_Init+0x19c>)
 80010ac:	42a8      	cmp	r0, r5
 80010ae:	d010      	beq.n	80010d2 <HAL_GPIO_Init+0x122>
 80010b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	d00e      	beq.n	80010d6 <HAL_GPIO_Init+0x126>
 80010b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010bc:	42a8      	cmp	r0, r5
 80010be:	d00c      	beq.n	80010da <HAL_GPIO_Init+0x12a>
 80010c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010c4:	42a8      	cmp	r0, r5
 80010c6:	bf14      	ite	ne
 80010c8:	2505      	movne	r5, #5
 80010ca:	2504      	moveq	r5, #4
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x12c>
 80010ce:	2500      	movs	r5, #0
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x12c>
 80010d2:	2501      	movs	r5, #1
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x12c>
 80010d6:	2502      	movs	r5, #2
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x12c>
 80010da:	2503      	movs	r5, #3
 80010dc:	fa05 f50c 	lsl.w	r5, r5, ip
 80010e0:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 80010e4:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4e1a      	ldr	r6, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x1a0>)
 80010e8:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ee:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 80010f2:	bf14      	ite	ne
 80010f4:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80010f8:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80010fc:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 8001100:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001102:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 8001106:	bf14      	ite	ne
 8001108:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800110c:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001110:	4e0f      	ldr	r6, [pc, #60]	; (8001150 <HAL_GPIO_Init+0x1a0>)
 8001112:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 800111e:	bf14      	ite	ne
 8001120:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001124:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001128:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 800112c:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112e:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_GPIO_Init+0x1a0>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001132:	bf54      	ite	pl
 8001134:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001138:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 800113a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800113c:	3301      	adds	r3, #1
 800113e:	e73b      	b.n	8000fb8 <HAL_GPIO_Init+0x8>
  }
}
 8001140:	b003      	add	sp, #12
 8001142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001154:	6903      	ldr	r3, [r0, #16]
 8001156:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001158:	bf0c      	ite	eq
 800115a:	2000      	moveq	r0, #0
 800115c:	2001      	movne	r0, #1
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	b10a      	cbz	r2, 8001166 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	6181      	str	r1, [r0, #24]
 8001164:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	6281      	str	r1, [r0, #40]	; 0x28
 8001168:	4770      	bx	lr

0800116a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800116a:	6943      	ldr	r3, [r0, #20]
 800116c:	4059      	eors	r1, r3
 800116e:	6141      	str	r1, [r0, #20]
 8001170:	4770      	bx	lr
	...

08001174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001174:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001178:	6959      	ldr	r1, [r3, #20]
 800117a:	4208      	tst	r0, r1
 800117c:	d002      	beq.n	8001184 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	f7ff f940 	bl	8000404 <HAL_GPIO_EXTI_Callback>
 8001184:	bd08      	pop	{r3, pc}
 8001186:	bf00      	nop
 8001188:	40010400 	.word	0x40010400

0800118c <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 800118c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800118e:	4c21      	ldr	r4, [pc, #132]	; (8001214 <SPIx_Init+0x88>)
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001190:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001192:	4620      	mov	r0, r4
 8001194:	f001 f8e4 	bl	8002360 <HAL_SPI_GetState>
 8001198:	2800      	cmp	r0, #0
 800119a:	d138      	bne.n	800120e <SPIx_Init+0x82>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <SPIx_Init+0x8c>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800119e:	60a0      	str	r0, [r4, #8]
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80011a0:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011a2:	2318      	movs	r3, #24
 80011a4:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    SpiHandle.Init.CRCPolynomial = 7;
 80011a6:	2307      	movs	r3, #7
 80011a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80011aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011ae:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80011b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b4:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80011b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011ba:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <SPIx_Init+0x90>)
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c0:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c2:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c4:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ce:	619a      	str	r2, [r3, #24]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	9a01      	ldr	r2, [sp, #4]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	695b      	ldr	r3, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80011e4:	9005      	str	r0, [sp, #20]

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80011ee:	23e0      	movs	r3, #224	; 0xe0
 80011f0:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011fe:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001200:	a903      	add	r1, sp, #12
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001202:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001204:	f7ff fed4 	bl	8000fb0 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 8001208:	4620      	mov	r0, r4
 800120a:	f000 ff00 	bl	800200e <HAL_SPI_Init>
  }
}
 800120e:	b008      	add	sp, #32
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	20000550 	.word	0x20000550
 8001218:	40013000 	.word	0x40013000
 800121c:	40021000 	.word	0x40021000

08001220 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800122a:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <SPIx_WriteRead+0x3c>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	f10d 010f 	add.w	r1, sp, #15
 8001238:	f10d 0217 	add.w	r2, sp, #23
 800123c:	2301      	movs	r3, #1
 800123e:	f000 ff55 	bl	80020ec <HAL_SPI_TransmitReceive>
 8001242:	b120      	cbz	r0, 800124e <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <SPIx_WriteRead+0x3c>)
 8001246:	f000 ff3b 	bl	80020c0 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800124a:	f7ff ff9f 	bl	800118c <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 800124e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001252:	b007      	add	sp, #28
 8001254:	f85d fb04 	ldr.w	pc, [sp], #4
 8001258:	200004a4 	.word	0x200004a4
 800125c:	20000550 	.word	0x20000550

08001260 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001260:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001262:	4c1b      	ldr	r4, [pc, #108]	; (80012d0 <I2Cx_Init+0x70>)
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001264:	b089      	sub	sp, #36	; 0x24
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001266:	4620      	mov	r0, r4
 8001268:	f000 fcf2 	bl	8001c50 <HAL_I2C_GetState>
 800126c:	2800      	cmp	r0, #0
 800126e:	d12c      	bne.n	80012ca <I2Cx_Init+0x6a>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <I2Cx_Init+0x74>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001272:	4d19      	ldr	r5, [pc, #100]	; (80012d8 <I2Cx_Init+0x78>)
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001274:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001276:	2332      	movs	r3, #50	; 0x32
 8001278:	60a3      	str	r3, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127a:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 800127e:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001282:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001284:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001286:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <I2Cx_Init+0x7c>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800128a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128e:	616b      	str	r3, [r5, #20]
 8001290:	696b      	ldr	r3, [r5, #20]
 8001292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80012a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80012a8:	a903      	add	r1, sp, #12
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80012aa:	2304      	movs	r3, #4
 80012ac:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80012ae:	f7ff fe7f 	bl	8000fb0 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80012b2:	69eb      	ldr	r3, [r5, #28]
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b8:	61eb      	str	r3, [r5, #28]
 80012ba:	69eb      	ldr	r3, [r5, #28]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	9302      	str	r3, [sp, #8]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 80012c2:	4620      	mov	r0, r4
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80012c4:	9b02      	ldr	r3, [sp, #8]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 80012c6:	f000 fb63 	bl	8001990 <HAL_I2C_Init>
  }
}
 80012ca:	b009      	add	sp, #36	; 0x24
 80012cc:	bd30      	pop	{r4, r5, pc}
 80012ce:	bf00      	nop
 80012d0:	200005b4 	.word	0x200005b4
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80012e2:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80012e4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80012e6:	b950      	cbnz	r0, 80012fe <BSP_LED_Init+0x1e>
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <BSP_LED_Init+0x100>)
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	e059      	b.n	80013b2 <BSP_LED_Init+0xd2>
 80012fe:	2801      	cmp	r0, #1
 8001300:	d10a      	bne.n	8001318 <BSP_LED_Init+0x38>
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <BSP_LED_Init+0x100>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	9b02      	ldr	r3, [sp, #8]
 8001316:	e04c      	b.n	80013b2 <BSP_LED_Init+0xd2>
 8001318:	2802      	cmp	r0, #2
 800131a:	d10a      	bne.n	8001332 <BSP_LED_Init+0x52>
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <BSP_LED_Init+0x100>)
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	9b03      	ldr	r3, [sp, #12]
 8001330:	e03f      	b.n	80013b2 <BSP_LED_Init+0xd2>
 8001332:	2803      	cmp	r0, #3
 8001334:	d10a      	bne.n	800134c <BSP_LED_Init+0x6c>
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <BSP_LED_Init+0x100>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	9304      	str	r3, [sp, #16]
 8001348:	9b04      	ldr	r3, [sp, #16]
 800134a:	e032      	b.n	80013b2 <BSP_LED_Init+0xd2>
 800134c:	2804      	cmp	r0, #4
 800134e:	d10a      	bne.n	8001366 <BSP_LED_Init+0x86>
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <BSP_LED_Init+0x100>)
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	9305      	str	r3, [sp, #20]
 8001362:	9b05      	ldr	r3, [sp, #20]
 8001364:	e025      	b.n	80013b2 <BSP_LED_Init+0xd2>
 8001366:	2805      	cmp	r0, #5
 8001368:	d10a      	bne.n	8001380 <BSP_LED_Init+0xa0>
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <BSP_LED_Init+0x100>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	9306      	str	r3, [sp, #24]
 800137c:	9b06      	ldr	r3, [sp, #24]
 800137e:	e018      	b.n	80013b2 <BSP_LED_Init+0xd2>
 8001380:	2806      	cmp	r0, #6
 8001382:	d10a      	bne.n	800139a <BSP_LED_Init+0xba>
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <BSP_LED_Init+0x100>)
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	9307      	str	r3, [sp, #28]
 8001396:	9b07      	ldr	r3, [sp, #28]
 8001398:	e00b      	b.n	80013b2 <BSP_LED_Init+0xd2>
 800139a:	2807      	cmp	r0, #7
 800139c:	d109      	bne.n	80013b2 <BSP_LED_Init+0xd2>
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <BSP_LED_Init+0x100>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	9308      	str	r3, [sp, #32]
 80013b0:	9b08      	ldr	r3, [sp, #32]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <BSP_LED_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80013b4:	4e0c      	ldr	r6, [pc, #48]	; (80013e8 <BSP_LED_Init+0x108>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80013b6:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80013ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80013be:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80013c6:	a909      	add	r1, sp, #36	; 0x24

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	930c      	str	r3, [sp, #48]	; 0x30
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80013cc:	f7ff fdf0 	bl	8000fb0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013d0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80013d4:	4629      	mov	r1, r5
 80013d6:	2200      	movs	r2, #0
 80013d8:	f7ff fec2 	bl	8001160 <HAL_GPIO_WritePin>
}
 80013dc:	b00e      	add	sp, #56	; 0x38
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08002858 	.word	0x08002858
 80013e8:	200004b0 	.word	0x200004b0

080013ec <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80013ee:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80013f0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <BSP_LED_On+0x18>)
 80013f6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f7ff beb0 	b.w	8001160 <HAL_GPIO_WritePin>
 8001400:	200004b0 	.word	0x200004b0
 8001404:	08002858 	.word	0x08002858

08001408 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800140a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800140c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <BSP_LED_Off+0x18>)
 8001412:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001416:	2200      	movs	r2, #0
 8001418:	f7ff bea2 	b.w	8001160 <HAL_GPIO_WritePin>
 800141c:	200004b0 	.word	0x200004b0
 8001420:	08002858 	.word	0x08002858

08001424 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001426:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001428:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <BSP_LED_Toggle+0x18>)
 800142e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001432:	f7ff be9a 	b.w	800116a <HAL_GPIO_TogglePin>
 8001436:	bf00      	nop
 8001438:	200004b0 	.word	0x200004b0
 800143c:	08002858 	.word	0x08002858

08001440 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001440:	b510      	push	{r4, lr}
 8001442:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001444:	b948      	cbnz	r0, 800145a <BSP_PB_Init+0x1a>
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <BSP_PB_Init+0x80>)
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <BSP_PB_Init+0x80>)
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	9b02      	ldr	r3, [sp, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800146e:	b969      	cbnz	r1, 800148c <BSP_PB_Init+0x4c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001470:	2301      	movs	r3, #1
 8001472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001474:	2302      	movs	r3, #2
 8001476:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <BSP_PB_Init+0x84>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	9104      	str	r1, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001480:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001484:	a903      	add	r1, sp, #12
 8001486:	f7ff fd93 	bl	8000fb0 <HAL_GPIO_Init>
 800148a:	e016      	b.n	80014ba <BSP_PB_Init+0x7a>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800148c:	2901      	cmp	r1, #1
 800148e:	d114      	bne.n	80014ba <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <BSP_PB_Init+0x88>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001496:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001498:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <BSP_PB_Init+0x84>)

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800149e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80014a4:	a903      	add	r1, sp, #12
 80014a6:	f7ff fd83 	bl	8000fb0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80014aa:	2006      	movs	r0, #6
 80014ac:	210f      	movs	r1, #15
 80014ae:	4622      	mov	r2, r4
 80014b0:	f7ff fd2a 	bl	8000f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80014b4:	2006      	movs	r0, #6
 80014b6:	f7ff fd59 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  }
}
 80014ba:	b008      	add	sp, #32
 80014bc:	bd10      	pop	{r4, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	200004a8 	.word	0x200004a8
 80014c8:	10110000 	.word	0x10110000

080014cc <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80014cc:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <BSP_PB_GetState+0x10>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80014d6:	f7ff fe3d 	bl	8001154 <HAL_GPIO_ReadPin>
}
 80014da:	bd08      	pop	{r3, pc}
 80014dc:	200004a8 	.word	0x200004a8

080014e0 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80014e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80014e4:	4c1b      	ldr	r4, [pc, #108]	; (8001554 <GYRO_IO_Init+0x74>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80014e6:	4d1c      	ldr	r5, [pc, #112]	; (8001558 <GYRO_IO_Init+0x78>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80014e8:	6963      	ldr	r3, [r4, #20]
 80014ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ee:	6163      	str	r3, [r4, #20]
 80014f0:	6963      	ldr	r3, [r4, #20]
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80014f2:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80014f8:	2600      	movs	r6, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2703      	movs	r7, #3
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80014fc:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80014fe:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001506:	4628      	mov	r0, r5
 8001508:	a903      	add	r1, sp, #12
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800150a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800150c:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001514:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001518:	f7ff fd4a 	bl	8000fb0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800151c:	4642      	mov	r2, r8
 800151e:	4628      	mov	r0, r5
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff fe1d 	bl	8001160 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001526:	6963      	ldr	r3, [r4, #20]
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152c:	6163      	str	r3, [r4, #20]
 800152e:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001530:	9703      	str	r7, [sp, #12]

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001536:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001538:	4628      	mov	r0, r5
 800153a:	a903      	add	r1, sp, #12

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800153c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800153e:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001540:	9706      	str	r7, [sp, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001542:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001544:	f7ff fd34 	bl	8000fb0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8001548:	f7ff fe20 	bl	800118c <SPIx_Init>
}
 800154c:	b009      	add	sp, #36	; 0x24
 800154e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	48001000 	.word	0x48001000

0800155c <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800155c:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	460d      	mov	r5, r1
 8001562:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001564:	bf88      	it	hi
 8001566:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800156c:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800156e:	2108      	movs	r1, #8
 8001570:	2200      	movs	r2, #0
 8001572:	f7ff fdf5 	bl	8001160 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001576:	4628      	mov	r0, r5
 8001578:	f7ff fe52 	bl	8001220 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800157c:	b134      	cbz	r4, 800158c <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 800157e:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 8001582:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 8001584:	f7ff fe4c 	bl	8001220 <SPIx_WriteRead>
    NumByteToWrite--;
 8001588:	b2a4      	uxth	r4, r4
 800158a:	e7f7      	b.n	800157c <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <GYRO_IO_Write+0x40>)
 800158e:	2108      	movs	r1, #8
 8001590:	2201      	movs	r2, #1
}
 8001592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001596:	f7ff bde3 	b.w	8001160 <HAL_GPIO_WritePin>
 800159a:	bf00      	nop
 800159c:	48001000 	.word	0x48001000

080015a0 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80015a0:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80015a2:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80015a4:	bf8c      	ite	hi
 80015a6:	f041 06c0 	orrhi.w	r6, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80015aa:	f041 0680 	orrls.w	r6, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80015ae:	4605      	mov	r5, r0
 80015b0:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <GYRO_IO_Read+0x44>)
 80015b4:	2108      	movs	r1, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	f7ff fdd2 	bl	8001160 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80015bc:	4630      	mov	r0, r6
 80015be:	f7ff fe2f 	bl	8001220 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80015c2:	b13c      	cbz	r4, 80015d4 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fe2b 	bl	8001220 <SPIx_WriteRead>
    NumByteToRead--;
 80015ca:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80015cc:	f805 0b01 	strb.w	r0, [r5], #1
    NumByteToRead--;
 80015d0:	b2a4      	uxth	r4, r4
 80015d2:	e7f6      	b.n	80015c2 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <GYRO_IO_Read+0x44>)
 80015d6:	2108      	movs	r1, #8
 80015d8:	2201      	movs	r2, #1
}  
 80015da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80015de:	f7ff bdbf 	b.w	8001160 <HAL_GPIO_WritePin>
 80015e2:	bf00      	nop
 80015e4:	48001000 	.word	0x48001000

080015e8 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <COMPASSACCELERO_IO_Init+0x6c>)
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80015ea:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015ec:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80015ee:	4d1a      	ldr	r5, [pc, #104]	; (8001658 <COMPASSACCELERO_IO_Init+0x70>)
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015f0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	695a      	ldr	r2, [r3, #20]
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80015f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015fe:	9201      	str	r2, [sp, #4]
 8001600:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	9302      	str	r3, [sp, #8]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001612:	2400      	movs	r4, #0
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001614:	9b02      	ldr	r3, [sp, #8]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001616:	9404      	str	r4, [sp, #16]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001618:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800161c:	4628      	mov	r0, r5
 800161e:	a903      	add	r1, sp, #12
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001620:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001622:	9405      	str	r4, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001626:	f7ff fcc3 	bl	8000fb0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800162a:	4622      	mov	r2, r4
 800162c:	4621      	mov	r1, r4
 800162e:	2008      	movs	r0, #8
 8001630:	f7ff fc6a 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8001634:	2008      	movs	r0, #8
 8001636:	f7ff fc99 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800163a:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800163c:	4628      	mov	r0, r5
 800163e:	a903      	add	r1, sp, #12
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001640:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001642:	9404      	str	r4, [sp, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	9606      	str	r6, [sp, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001646:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001648:	f7ff fcb2 	bl	8000fb0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800164c:	f7ff fe08 	bl	8001260 <I2Cx_Init>
}
 8001650:	b008      	add	sp, #32
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	48001000 	.word	0x48001000

0800165c <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <COMPASSACCELERO_IO_ITConfig+0x44>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <COMPASSACCELERO_IO_ITConfig+0x48>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001660:	695a      	ldr	r2, [r3, #20]
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001662:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001664:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	695b      	ldr	r3, [r3, #20]
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800166c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001676:	2330      	movs	r3, #48	; 0x30
 8001678:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <COMPASSACCELERO_IO_ITConfig+0x4c>)
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800167c:	2400      	movs	r4, #0
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800167e:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001680:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001686:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001688:	f7ff fc92 	bl	8000fb0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800168c:	4621      	mov	r1, r4
 800168e:	4622      	mov	r2, r4
 8001690:	200a      	movs	r0, #10
 8001692:	f7ff fc39 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001696:	200a      	movs	r0, #10
 8001698:	f7ff fc68 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  
}
 800169c:	b006      	add	sp, #24
 800169e:	bd10      	pop	{r4, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48001000 	.word	0x48001000
 80016a8:	10110000 	.word	0x10110000

080016ac <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	ab06      	add	r3, sp, #24
 80016b2:	4606      	mov	r6, r0
 80016b4:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80016b8:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <COMPASSACCELERO_IO_Write+0x34>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	6814      	ldr	r4, [r2, #0]
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <COMPASSACCELERO_IO_Write+0x38>)
 80016c4:	9402      	str	r4, [sp, #8]
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80016c6:	460d      	mov	r5, r1
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80016c8:	462a      	mov	r2, r5
 80016ca:	4631      	mov	r1, r6
 80016cc:	f000 f9c2 	bl	8001a54 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80016d0:	b120      	cbz	r0, 80016dc <COMPASSACCELERO_IO_Write+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <COMPASSACCELERO_IO_Write+0x38>)
 80016d4:	f000 f9a8 	bl	8001a28 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80016d8:	f7ff fdc2 	bl	8001260 <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 80016dc:	b006      	add	sp, #24
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	200004ac 	.word	0x200004ac
 80016e4:	200005b4 	.word	0x200005b4

080016e8 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80016e8:	b530      	push	{r4, r5, lr}
 80016ea:	b087      	sub	sp, #28
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 80016ec:	ab06      	add	r3, sp, #24
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80016ee:	460a      	mov	r2, r1
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 80016f0:	2100      	movs	r1, #0
 80016f2:	f803 1d01 	strb.w	r1, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <COMPASSACCELERO_IO_Read+0x38>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	680c      	ldr	r4, [r1, #0]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001700:	4605      	mov	r5, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001702:	9402      	str	r4, [sp, #8]
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <COMPASSACCELERO_IO_Read+0x3c>)
 8001706:	4629      	mov	r1, r5
 8001708:	f000 fa20 	bl	8001b4c <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 800170c:	b120      	cbz	r0, 8001718 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <COMPASSACCELERO_IO_Read+0x3c>)
 8001710:	f000 f98a 	bl	8001a28 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001714:	f7ff fda4 	bl	8001260 <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8001718:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800171c:	b007      	add	sp, #28
 800171e:	bd30      	pop	{r4, r5, pc}
 8001720:	200004ac 	.word	0x200004ac
 8001724:	200005b4 	.word	0x200005b4

08001728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001728:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800172a:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <I2C_TransferConfig+0x20>)
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800172e:	6865      	ldr	r5, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001730:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001732:	9d03      	ldr	r5, [sp, #12]
 8001734:	4328      	orrs	r0, r5
 8001736:	4303      	orrs	r3, r0
 8001738:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800173c:	ea43 0001 	orr.w	r0, r3, r1
 8001740:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8001744:	6062      	str	r2, [r4, #4]
 8001746:	bd30      	pop	{r4, r5, pc}
 8001748:	fc009800 	.word	0xfc009800

0800174c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8001752:	f7ff fbb3 	bl	8000ebc <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 800175a:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800175c:	f013 0010 	ands.w	r0, r3, #16
 8001760:	d10b      	bne.n	800177a <I2C_IsAcknowledgeFailed+0x2e>
 8001762:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	0691      	lsls	r1, r2, #26
 8001768:	d411      	bmi.n	800178e <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800176a:	1c68      	adds	r0, r5, #1
 800176c:	d0fa      	beq.n	8001764 <I2C_IsAcknowledgeFailed+0x18>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800176e:	b135      	cbz	r5, 800177e <I2C_IsAcknowledgeFailed+0x32>
 8001770:	f7ff fba4 	bl	8000ebc <HAL_GetTick>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	42a8      	cmp	r0, r5
 8001778:	d801      	bhi.n	800177e <I2C_IsAcknowledgeFailed+0x32>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	e7f2      	b.n	8001764 <I2C_IsAcknowledgeFailed+0x18>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800177e:	2301      	movs	r3, #1
 8001780:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001784:	2300      	movs	r3, #0
 8001786:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800178a:	2003      	movs	r0, #3
 800178c:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800178e:	2210      	movs	r2, #16
 8001790:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001792:	2220      	movs	r2, #32
 8001794:	61da      	str	r2, [r3, #28]

    /* Flush TX register if not empty */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	07d2      	lsls	r2, r2, #31
 800179a:	d403      	bmi.n	80017a4 <I2C_IsAcknowledgeFailed+0x58>
    {
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	619a      	str	r2, [r3, #24]
    }

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <I2C_IsAcknowledgeFailed+0x74>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017ac:	2304      	movs	r3, #4
 80017ae:	63a3      	str	r3, [r4, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80017b0:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b2:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 80017b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	bf00      	nop
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 80017c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c8:	4604      	mov	r4, r0
 80017ca:	460e      	mov	r6, r1
 80017cc:	4690      	mov	r8, r2
 80017ce:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fb74 	bl	8000ebc <HAL_GetTick>
 80017d4:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 80017d6:	f1b8 0f00 	cmp.w	r8, #0
 80017da:	d125      	bne.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017dc:	6822      	ldr	r2, [r4, #0]
 80017de:	6993      	ldr	r3, [r2, #24]
 80017e0:	4033      	ands	r3, r6
 80017e2:	42b3      	cmp	r3, r6
 80017e4:	d00e      	beq.n	8001804 <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80017e6:	1c69      	adds	r1, r5, #1
 80017e8:	d0f9      	beq.n	80017de <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80017ea:	b17d      	cbz	r5, 800180c <I2C_WaitOnFlagUntilTimeout+0x48>
 80017ec:	f7ff fb66 	bl	8000ebc <HAL_GetTick>
 80017f0:	1bc0      	subs	r0, r0, r7
 80017f2:	42a8      	cmp	r0, r5
 80017f4:	d9f2      	bls.n	80017dc <I2C_WaitOnFlagUntilTimeout+0x18>
 80017f6:	e009      	b.n	800180c <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80017f8:	1c6b      	adds	r3, r5, #1
 80017fa:	d106      	bne.n	800180a <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80017fc:	6993      	ldr	r3, [r2, #24]
 80017fe:	4033      	ands	r3, r6
 8001800:	42b3      	cmp	r3, r6
 8001802:	d0f9      	beq.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800180a:	b945      	cbnz	r5, 800181e <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800180c:	2301      	movs	r3, #1
 800180e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001812:	2300      	movs	r3, #0
 8001814:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8001818:	2003      	movs	r0, #3
 800181a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800181e:	f7ff fb4d 	bl	8000ebc <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	42a8      	cmp	r0, r5
 8001826:	d8f1      	bhi.n	800180c <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	e7e7      	b.n	80017fc <I2C_WaitOnFlagUntilTimeout+0x38>

0800182c <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8001832:	f7ff fb43 	bl	8000ebc <HAL_GetTick>
 8001836:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	0798      	lsls	r0, r3, #30
 800183e:	d419      	bmi.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7ff ff82 	bl	800174c <I2C_IsAcknowledgeFailed>
 8001848:	b9b0      	cbnz	r0, 8001878 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800184a:	1c6b      	adds	r3, r5, #1
 800184c:	d0f4      	beq.n	8001838 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800184e:	b95d      	cbnz	r5, 8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8001858:	2301      	movs	r3, #1
 800185a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001864:	2003      	movs	r0, #3
 8001866:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001868:	f7ff fb28 	bl	8000ebc <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	42a8      	cmp	r0, r5
 8001870:	d9e2      	bls.n	8001838 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8001872:	e7ed      	b.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8001874:	2000      	movs	r0, #0
 8001876:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 800187a:	bd70      	pop	{r4, r5, r6, pc}

0800187c <I2C_RequestMemoryWrite>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 800187c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800187e:	9d08      	ldr	r5, [sp, #32]
 8001880:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8001886:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001888:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 800188a:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	b2fa      	uxtb	r2, r7
 8001892:	f7ff ff49 	bl	8001728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7ff ffc7 	bl	800182c <I2C_WaitOnTXISFlagUntilTimeout>
 800189e:	b128      	cbz	r0, 80018ac <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018a2:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 80018a4:	bf0c      	ite	eq
 80018a6:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 80018a8:	2003      	movne	r0, #3
 80018aa:	e017      	b.n	80018dc <I2C_RequestMemoryWrite+0x60>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ac:	2f01      	cmp	r7, #1
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	d008      	beq.n	80018c4 <I2C_RequestMemoryWrite+0x48>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 80018b2:	0a32      	lsrs	r2, r6, #8
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7ff ffb7 	bl	800182c <I2C_WaitOnTXISFlagUntilTimeout>
 80018be:	2800      	cmp	r0, #0
 80018c0:	d1ee      	bne.n	80018a0 <I2C_RequestMemoryWrite+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	b2f6      	uxtb	r6, r6
 80018c6:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80018c8:	4620      	mov	r0, r4
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	2200      	movs	r2, #0
 80018ce:	462b      	mov	r3, r5
 80018d0:	f7ff ff78 	bl	80017c4 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 80018d4:	2800      	cmp	r0, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2003      	movne	r0, #3
 80018da:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 80018dc:	b003      	add	sp, #12
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e0 <I2C_RequestMemoryRead>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80018e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018e2:	9d08      	ldr	r5, [sp, #32]
 80018e4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80018ea:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018ec:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80018ee:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018f0:	2300      	movs	r3, #0
 80018f2:	b2fa      	uxtb	r2, r7
 80018f4:	f7ff ff18 	bl	8001728 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7ff ff96 	bl	800182c <I2C_WaitOnTXISFlagUntilTimeout>
 8001900:	b128      	cbz	r0, 800190e <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001904:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8001906:	bf0c      	ite	eq
 8001908:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 800190a:	2003      	movne	r0, #3
 800190c:	e017      	b.n	800193e <I2C_RequestMemoryRead+0x5e>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800190e:	2f01      	cmp	r7, #1
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	d008      	beq.n	8001926 <I2C_RequestMemoryRead+0x46>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8001914:	0a32      	lsrs	r2, r6, #8
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7ff ff86 	bl	800182c <I2C_WaitOnTXISFlagUntilTimeout>
 8001920:	2800      	cmp	r0, #0
 8001922:	d1ee      	bne.n	8001902 <I2C_RequestMemoryRead+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	b2f6      	uxtb	r6, r6
 8001928:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800192a:	4620      	mov	r0, r4
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	2200      	movs	r2, #0
 8001930:	462b      	mov	r3, r5
 8001932:	f7ff ff47 	bl	80017c4 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8001936:	2800      	cmp	r0, #0
 8001938:	bf14      	ite	ne
 800193a:	2003      	movne	r0, #3
 800193c:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 800193e:	b003      	add	sp, #12
 8001940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001942 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8001942:	b570      	push	{r4, r5, r6, lr}
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8001948:	f7ff fab8 	bl	8000ebc <HAL_GetTick>
 800194c:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	069a      	lsls	r2, r3, #26
 8001954:	d417      	bmi.n	8001986 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7ff fef7 	bl	800174c <I2C_IsAcknowledgeFailed>
 800195e:	b9a0      	cbnz	r0, 800198a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001960:	b95d      	cbnz	r5, 800197a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 800196a:	2301      	movs	r3, #1
 800196c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001976:	2003      	movs	r0, #3
 8001978:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800197a:	f7ff fa9f 	bl	8000ebc <HAL_GetTick>
 800197e:	1b80      	subs	r0, r0, r6
 8001980:	42a8      	cmp	r0, r5
 8001982:	d9e4      	bls.n	800194e <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8001984:	e7ed      	b.n	8001962 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001986:	2000      	movs	r0, #0
 8001988:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 800198a:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800198c:	bd70      	pop	{r4, r5, r6, pc}

0800198e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800198e:	4770      	bx	lr

08001990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8001990:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001992:	4604      	mov	r4, r0
 8001994:	2800      	cmp	r0, #0
 8001996:	d044      	beq.n	8001a22 <HAL_I2C_Init+0x92>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001998:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800199c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019a0:	b91b      	cbnz	r3, 80019aa <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a6:	f7ff fff2 	bl	800198e <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019aa:	2302      	movs	r3, #2
 80019ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	68e1      	ldr	r1, [r4, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019bc:	6862      	ldr	r2, [r4, #4]
 80019be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019c2:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ca:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80019cc:	68a2      	ldr	r2, [r4, #8]
 80019ce:	b142      	cbz	r2, 80019e2 <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d0:	2901      	cmp	r1, #1
 80019d2:	d103      	bne.n	80019dc <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e007      	b.n	80019ec <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019e0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019e2:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019e4:	bf04      	itt	eq
 80019e6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80019ea:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ec:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019ee:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019fa:	6922      	ldr	r2, [r4, #16]
 80019fc:	4311      	orrs	r1, r2
 80019fe:	69a2      	ldr	r2, [r4, #24]
 8001a00:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8001a04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a06:	6a21      	ldr	r1, [r4, #32]
 8001a08:	69e2      	ldr	r2, [r4, #28]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1a:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8001a20:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8001a24:	bd10      	pop	{r4, pc}

08001a26 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b180      	cbz	r0, 8001a50 <HAL_I2C_DeInit+0x28>
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	6803      	ldr	r3, [r0, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a3e:	f7ff fff2 	bl	8001a26 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a42:	2000      	movs	r0, #0
 8001a44:	63a0      	str	r0, [r4, #56]	; 0x38

  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a46:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

  hi2c->State = HAL_I2C_STATE_RESET;
 8001a4a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8001a4e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8001a52:	bd10      	pop	{r4, pc}

08001a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a58:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a5c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001a60:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 8001a64:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	fa5f fa8a 	uxtb.w	sl, sl
 8001a6c:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a70:	4604      	mov	r4, r0
 8001a72:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	d161      	bne.n	8001b3a <HAL_I2C_Mem_Write+0xe6>
  { 
    if((pData == NULL) || (Size == 0)) 
 8001a76:	f1b8 0f00 	cmp.w	r8, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_I2C_Mem_Write+0x2c>
    {
      return  HAL_ERROR;                                    
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e05f      	b.n	8001b40 <HAL_I2C_Mem_Write+0xec>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d0fb      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a84:	6806      	ldr	r6, [r0, #0]
 8001a86:	69b6      	ldr	r6, [r6, #24]
 8001a88:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001a8c:	d155      	bne.n	8001b3a <HAL_I2C_Mem_Write+0xe6>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8e:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8001a92:	f1bc 0f01 	cmp.w	ip, #1
 8001a96:	d050      	beq.n	8001b3a <HAL_I2C_Mem_Write+0xe6>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8001a98:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8001a9c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa0:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	6386      	str	r6, [r0, #56]	; 0x38
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001aa6:	f8cd 9000 	str.w	r9, [sp]
 8001aaa:	f7ff fee7 	bl	800187c <I2C_RequestMemoryWrite>
 8001aae:	b118      	cbz	r0, 8001ab8 <HAL_I2C_Mem_Write+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8001ab6:	e030      	b.n	8001b1a <HAL_I2C_Mem_Write+0xc6>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ab8:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8001aba:	2dff      	cmp	r5, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001abc:	4620      	mov	r0, r4
 8001abe:	4639      	mov	r1, r7
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8001ac0:	d81c      	bhi.n	8001afc <HAL_I2C_Mem_Write+0xa8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ac2:	b2ea      	uxtb	r2, r5
 8001ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac8:	f7ff fe2e 	bl	8001728 <I2C_TransferConfig>
      Sizetmp = Size;
 8001acc:	462e      	mov	r6, r5
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7ff feab 	bl	800182c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad6:	b9f8      	cbnz	r0, 8001b18 <HAL_I2C_Mem_Write+0xc4>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f818 2b01 	ldrb.w	r2, [r8], #1
      Sizetmp--;
      Size--;
 8001ade:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 8001ae0:	3e01      	subs	r6, #1
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 8001ae4:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 8001ae6:	d110      	bne.n	8001b0a <HAL_I2C_Mem_Write+0xb6>
 8001ae8:	b18d      	cbz	r5, 8001b0e <HAL_I2C_Mem_Write+0xba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8001aea:	4620      	mov	r0, r4
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	4632      	mov	r2, r6
 8001af0:	464b      	mov	r3, r9
 8001af2:	f7ff fe67 	bl	80017c4 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	bb10      	cbnz	r0, 8001b3e <HAL_I2C_Mem_Write+0xea>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001af8:	9600      	str	r6, [sp, #0]
 8001afa:	e7de      	b.n	8001aba <HAL_I2C_Mem_Write+0x66>
 8001afc:	22ff      	movs	r2, #255	; 0xff
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	f7ff fe11 	bl	8001728 <I2C_TransferConfig>
          Sizetmp = 255;
 8001b06:	26ff      	movs	r6, #255	; 0xff
 8001b08:	e7e1      	b.n	8001ace <HAL_I2C_Mem_Write+0x7a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d1df      	bne.n	8001ace <HAL_I2C_Mem_Write+0x7a>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8001b0e:	4620      	mov	r0, r4
 8001b10:	2119      	movs	r1, #25
 8001b12:	f7ff ff16 	bl	8001942 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b16:	b118      	cbz	r0, 8001b20 <HAL_I2C_Mem_Write+0xcc>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d10f      	bne.n	8001b3e <HAL_I2C_Mem_Write+0xea>
 8001b1e:	e7ad      	b.n	8001a7c <HAL_I2C_Mem_Write+0x28>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	2220      	movs	r2, #32
 8001b24:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_I2C_Mem_Write+0xf4>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b34:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 8001b38:	e002      	b.n	8001b40 <HAL_I2C_Mem_Write+0xec>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	e000      	b.n	8001b40 <HAL_I2C_Mem_Write+0xec>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 8001b3e:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001b40:	b002      	add	sp, #8
 8001b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b46:	bf00      	nop
 8001b48:	fe00e800 	.word	0xfe00e800

08001b4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b50:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001b58:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 8001b5c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	fa5f fa8a 	uxtb.w	sl, sl
 8001b64:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b6c:	d169      	bne.n	8001c42 <HAL_I2C_Mem_Read+0xf6>
  {    
    if((pData == NULL) || (Size == 0)) 
 8001b6e:	f1b8 0f00 	cmp.w	r8, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Mem_Read+0x2c>
    {
      return  HAL_ERROR;                                    
 8001b74:	2001      	movs	r0, #1
 8001b76:	e065      	b.n	8001c44 <HAL_I2C_Mem_Read+0xf8>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 8001b78:	2d00      	cmp	r5, #0
 8001b7a:	d0fb      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b7c:	6806      	ldr	r6, [r0, #0]
 8001b7e:	69b6      	ldr	r6, [r6, #24]
 8001b80:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001b84:	d15d      	bne.n	8001c42 <HAL_I2C_Mem_Read+0xf6>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b86:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8001b8a:	f1bc 0f01 	cmp.w	ip, #1
 8001b8e:	d058      	beq.n	8001c42 <HAL_I2C_Mem_Read+0xf6>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8001b90:	f04f 0e62 	mov.w	lr, #98	; 0x62
 8001b94:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b98:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	6386      	str	r6, [r0, #56]	; 0x38
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001b9e:	f8cd 9000 	str.w	r9, [sp]
 8001ba2:	f7ff fe9d 	bl	80018e0 <I2C_RequestMemoryRead>
 8001ba6:	b118      	cbz	r0, 8001bb0 <HAL_I2C_Mem_Read+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001baa:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8001bae:	e037      	b.n	8001c20 <HAL_I2C_Mem_Read+0xd4>
 8001bb0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8001bb4:	2dff      	cmp	r5, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8001bbc:	d821      	bhi.n	8001c02 <HAL_I2C_Mem_Read+0xb6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001bbe:	b2ea      	uxtb	r2, r5
 8001bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc4:	f7ff fdb0 	bl	8001728 <I2C_TransferConfig>
      Sizetmp = Size;
 8001bc8:	462e      	mov	r6, r5
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8001bca:	4620      	mov	r0, r4
 8001bcc:	2104      	movs	r1, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	f7ff fdf7 	bl	80017c4 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	bb28      	cbnz	r0, 8001c24 <HAL_I2C_Mem_Read+0xd8>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8001bdc:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 8001bde:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8001be0:	f808 3b01 	strb.w	r3, [r8], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8001be4:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 8001be6:	d113      	bne.n	8001c10 <HAL_I2C_Mem_Read+0xc4>
 8001be8:	b1a5      	cbz	r5, 8001c14 <HAL_I2C_Mem_Read+0xc8>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8001bea:	4620      	mov	r0, r4
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	4632      	mov	r2, r6
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	f7ff fde7 	bl	80017c4 <I2C_WaitOnFlagUntilTimeout>
 8001bf6:	b9a8      	cbnz	r0, 8001c24 <HAL_I2C_Mem_Read+0xd8>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bf8:	9600      	str	r6, [sp, #0]
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8001bfe:	2dff      	cmp	r5, #255	; 0xff
 8001c00:	e7dc      	b.n	8001bbc <HAL_I2C_Mem_Read+0x70>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c02:	22ff      	movs	r2, #255	; 0xff
 8001c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c08:	f7ff fd8e 	bl	8001728 <I2C_TransferConfig>
          Sizetmp = 255;
 8001c0c:	26ff      	movs	r6, #255	; 0xff
 8001c0e:	e7dc      	b.n	8001bca <HAL_I2C_Mem_Read+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	d1da      	bne.n	8001bca <HAL_I2C_Mem_Read+0x7e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8001c14:	4620      	mov	r0, r4
 8001c16:	2119      	movs	r1, #25
 8001c18:	f7ff fe93 	bl	8001942 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c1c:	b120      	cbz	r0, 8001c28 <HAL_I2C_Mem_Read+0xdc>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d0a7      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x28>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
 8001c26:	e00d      	b.n	8001c44 <HAL_I2C_Mem_Read+0xf8>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_I2C_Mem_Read+0x100>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 8001c40:	e000      	b.n	8001c44 <HAL_I2C_Mem_Read+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2002      	movs	r0, #2
  }
}
 8001c44:	b002      	add	sp, #8
 8001c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4a:	bf00      	nop
 8001c4c:	fe00e800 	.word	0xfe00e800

08001c50 <HAL_I2C_GetState>:
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  /* Return I2C handle state */
  return hi2c->State;
 8001c50:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001c54:	4770      	bx	lr
	...

08001c58 <BSP_ACCELERO_Init>:
/**
  * @brief  Set ACCELEROMETER Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 8001c58:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001c5a:	4c09      	ldr	r4, [pc, #36]	; (8001c80 <BSP_ACCELERO_Init+0x28>)
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	2833      	cmp	r0, #51	; 0x33
 8001c62:	d10b      	bne.n	8001c7c <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001c64:	4d07      	ldr	r5, [pc, #28]	; (8001c84 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c66:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001c68:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c6a:	f640 0047 	movw	r0, #2119	; 0x847
 8001c6e:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	2090      	movs	r0, #144	; 0x90
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001c78:	2000      	movs	r0, #0
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8001c7c:	2001      	movs	r0, #1
  }

  return ret;
}
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
 8001c80:	200004d0 	.word	0x200004d0
 8001c84:	200005f0 	.word	0x200005f0

08001c88 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointeur on 3 angular accelerations 
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001c88:	b508      	push	{r3, lr}
  if(AccelerometerDrv->GetXYZ!= NULL)
 8001c8a:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <BSP_ACCELERO_GetXYZ+0x10>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	b103      	cbz	r3, 8001c94 <BSP_ACCELERO_GetXYZ+0xc>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8001c92:	4798      	blx	r3
 8001c94:	bd08      	pop	{r3, pc}
 8001c96:	bf00      	nop
 8001c98:	200005f0 	.word	0x200005f0

08001c9c <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001ca0:	f7ff fca2 	bl	80015e8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001ca4:	b2e2      	uxtb	r2, r4
 8001ca6:	2032      	movs	r0, #50	; 0x32
 8001ca8:	2120      	movs	r1, #32
 8001caa:	f7ff fcff 	bl	80016ac <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001cae:	2032      	movs	r0, #50	; 0x32
 8001cb0:	2123      	movs	r1, #35	; 0x23
 8001cb2:	2200      	movs	r2, #0
}
 8001cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001cb8:	f7ff bcf8 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001cbc <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001cbc:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001cbe:	f7ff fc93 	bl	80015e8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001cc2:	2032      	movs	r0, #50	; 0x32
 8001cc4:	210f      	movs	r1, #15
  
  return ctrl;
}
 8001cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001cca:	f7ff bd0d 	b.w	80016e8 <COMPASSACCELERO_IO_Read>

08001cce <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001cce:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001cd0:	2124      	movs	r1, #36	; 0x24
 8001cd2:	2032      	movs	r0, #50	; 0x32
 8001cd4:	f7ff fd08 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001cd8:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001cdc:	2124      	movs	r1, #36	; 0x24
 8001cde:	2032      	movs	r0, #50	; 0x32
 8001ce0:	b2d2      	uxtb	r2, r2
}
 8001ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001ce6:	f7ff bce1 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001cea <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001cea:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001cec:	2121      	movs	r1, #33	; 0x21
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001cee:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001cf0:	2032      	movs	r0, #50	; 0x32
 8001cf2:	f7ff fcf9 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8001cf6:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001cfa:	4322      	orrs	r2, r4
 8001cfc:	2032      	movs	r0, #50	; 0x32
 8001cfe:	2121      	movs	r1, #33	; 0x21
}
 8001d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001d04:	f7ff bcd2 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001d08 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001d08:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001d0a:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001d0c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001d0e:	2032      	movs	r0, #50	; 0x32
 8001d10:	f7ff fcea 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 8001d14:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001d18:	4322      	orrs	r2, r4
 8001d1a:	2032      	movs	r0, #50	; 0x32
 8001d1c:	2121      	movs	r1, #33	; 0x21
}
 8001d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001d22:	f7ff bcc3 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001d26 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001d26:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001d28:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001d2e:	2032      	movs	r0, #50	; 0x32
 8001d30:	f7ff fcda 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001d34:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001d36:	4605      	mov	r5, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001d38:	2032      	movs	r0, #50	; 0x32
 8001d3a:	f7ff fcd5 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001d3e:	2128      	movs	r1, #40	; 0x28
 8001d40:	2032      	movs	r0, #50	; 0x32
 8001d42:	f7ff fcd1 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001d46:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001d48:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001d4c:	2032      	movs	r0, #50	; 0x32
 8001d4e:	f7ff fccb 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001d52:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001d54:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001d58:	2032      	movs	r0, #50	; 0x32
 8001d5a:	f7ff fcc5 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001d5e:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001d60:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001d64:	2032      	movs	r0, #50	; 0x32
 8001d66:	f7ff fcbf 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001d6a:	212c      	movs	r1, #44	; 0x2c
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001d6c:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001d70:	2032      	movs	r0, #50	; 0x32
 8001d72:	f7ff fcb9 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001d76:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001d78:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001d7c:	2032      	movs	r0, #50	; 0x32
 8001d7e:	f7ff fcb3 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001d82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001d86:	f99d 1009 	ldrsb.w	r1, [sp, #9]
 8001d8a:	f99d 6008 	ldrsb.w	r6, [sp, #8]
 8001d8e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8001d92:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8001d96:	f99d 700c 	ldrsb.w	r7, [sp, #12]
 8001d9a:	b240      	sxtb	r0, r0
 8001d9c:	d119      	bne.n	8001dd2 <LSM303DLHC_AccReadXYZ+0xac>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001d9e:	b289      	uxth	r1, r1
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	b280      	uxth	r0, r0
 8001da4:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8001da8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001dac:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8001db0:	f8ad 6000 	strh.w	r6, [sp]
 8001db4:	f8ad 2002 	strh.w	r2, [sp, #2]
 8001db8:	f8ad 7004 	strh.w	r7, [sp, #4]
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001dbc:	f005 0330 	and.w	r3, r5, #48	; 0x30
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d016      	beq.n	8001df2 <LSM303DLHC_AccReadXYZ+0xcc>
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	d016      	beq.n	8001df6 <LSM303DLHC_AccReadXYZ+0xd0>
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	bf0c      	ite	eq
 8001dcc:	2302      	moveq	r3, #2
 8001dce:	2301      	movne	r3, #1
 8001dd0:	e012      	b.n	8001df8 <LSM303DLHC_AccReadXYZ+0xd2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001dd2:	b2b6      	uxth	r6, r6
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	b2bf      	uxth	r7, r7
 8001dd8:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8001ddc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001de0:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 8001de4:	f8ad 1000 	strh.w	r1, [sp]
 8001de8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001dec:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001df0:	e7e4      	b.n	8001dbc <LSM303DLHC_AccReadXYZ+0x96>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001df2:	2304      	movs	r3, #4
    break;
 8001df4:	e000      	b.n	8001df8 <LSM303DLHC_AccReadXYZ+0xd2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001df6:	230c      	movs	r3, #12
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001df8:	f8bd 2000 	ldrh.w	r2, [sp]
 8001dfc:	435a      	muls	r2, r3
 8001dfe:	8022      	strh	r2, [r4, #0]
 8001e00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001e04:	435a      	muls	r2, r3
 8001e06:	8062      	strh	r2, [r4, #2]
 8001e08:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001e0c:	4353      	muls	r3, r2
 8001e0e:	80a3      	strh	r3, [r4, #4]
  }
}
 8001e10:	b005      	add	sp, #20
 8001e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e14 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001e14:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001e16:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001e18:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001e1a:	2032      	movs	r0, #50	; 0x32
 8001e1c:	f7ff fc64 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001e20:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001e24:	4322      	orrs	r2, r4
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	2121      	movs	r1, #33	; 0x21
}
 8001e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001e2e:	f7ff bc3d 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001e32 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001e32:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001e34:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001e36:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f7ff fc55 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001e3e:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001e42:	2122      	movs	r1, #34	; 0x22
 8001e44:	2032      	movs	r0, #50	; 0x32
 8001e46:	b2d2      	uxtb	r2, r2
}
 8001e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001e4c:	f7ff bc2e 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001e50 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001e50:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001e52:	2138      	movs	r1, #56	; 0x38
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001e54:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001e56:	2032      	movs	r0, #50	; 0x32
 8001e58:	f7ff fc46 	bl	80016e8 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001e5c:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001e60:	2138      	movs	r1, #56	; 0x38
 8001e62:	2032      	movs	r0, #50	; 0x32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f7ff fc21 	bl	80016ac <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001e6a:	2032      	movs	r0, #50	; 0x32
 8001e6c:	213a      	movs	r1, #58	; 0x3a
 8001e6e:	220a      	movs	r2, #10
 8001e70:	f7ff fc1c 	bl	80016ac <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	213b      	movs	r1, #59	; 0x3b
 8001e78:	2205      	movs	r2, #5
 8001e7a:	f7ff fc17 	bl	80016ac <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001e7e:	2032      	movs	r0, #50	; 0x32
 8001e80:	213c      	movs	r1, #60	; 0x3c
 8001e82:	2205      	movs	r2, #5
 8001e84:	f7ff fc12 	bl	80016ac <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e88:	2032      	movs	r0, #50	; 0x32
 8001e8a:	213d      	movs	r1, #61	; 0x3d
 8001e8c:	4602      	mov	r2, r0
}
 8001e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e92:	f7ff bc0b 	b.w	80016ac <COMPASSACCELERO_IO_Write>

08001e96 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001e96:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001e98:	f7ff fbe0 	bl	800165c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001e9c:	2080      	movs	r0, #128	; 0x80
 8001e9e:	f7ff ffc8 	bl	8001e32 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001ea2:	2004      	movs	r0, #4
 8001ea4:	f7ff ffb6 	bl	8001e14 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001ea8:	2010      	movs	r0, #16
}
 8001eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001eae:	f7ff bfcf 	b.w	8001e50 <LSM303DLHC_AccClickITEnable>

08001eb2 <SPI_WaitFifoStateUntilTimeout>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
 8001eb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460f      	mov	r7, r1
 8001eba:	4616      	mov	r6, r2
 8001ebc:	461d      	mov	r5, r3
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 8001ebe:	f7fe fffd 	bl	8000ebc <HAL_GetTick>
 8001ec2:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Fifo) != State)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	403a      	ands	r2, r7
 8001eca:	42b2      	cmp	r2, r6
 8001ecc:	d03d      	beq.n	8001f4a <SPI_WaitFifoStateUntilTimeout+0x98>
  {
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ece:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 8001ed2:	d106      	bne.n	8001ee2 <SPI_WaitFifoStateUntilTimeout+0x30>
 8001ed4:	b92e      	cbnz	r6, 8001ee2 <SPI_WaitFifoStateUntilTimeout+0x30>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 8001ed6:	7b1a      	ldrb	r2, [r3, #12]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f88d 2007 	strb.w	r2, [sp, #7]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001ede:	f89d 2007 	ldrb.w	r2, [sp, #7]
    }

    if(Timeout != HAL_MAX_DELAY)
 8001ee2:	1c6a      	adds	r2, r5, #1
 8001ee4:	d0ef      	beq.n	8001ec6 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 8001ee6:	b94d      	cbnz	r5, 8001efc <SPI_WaitFifoStateUntilTimeout+0x4a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ef0:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ef2:	6862      	ldr	r2, [r4, #4]
 8001ef4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ef8:	d112      	bne.n	8001f20 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001efa:	e006      	b.n	8001f0a <SPI_WaitFifoStateUntilTimeout+0x58>
      UNUSED(tmpreg);
    }

    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 8001efc:	f7fe ffde 	bl	8000ebc <HAL_GetTick>
 8001f00:	ebc8 0000 	rsb	r0, r8, r0
 8001f04:	42a8      	cmp	r0, r5
 8001f06:	d3dd      	bcc.n	8001ec4 <SPI_WaitFifoStateUntilTimeout+0x12>
 8001f08:	e7ee      	b.n	8001ee8 <SPI_WaitFifoStateUntilTimeout+0x36>
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f0a:	68a2      	ldr	r2, [r4, #8]
 8001f0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f10:	d002      	beq.n	8001f18 <SPI_WaitFifoStateUntilTimeout+0x66>
 8001f12:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001f16:	d103      	bne.n	8001f20 <SPI_WaitFifoStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f22:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f26:	d108      	bne.n	8001f3a <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f40:	2300      	movs	r3, #0
 8001f42:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001f46:	2003      	movs	r0, #3
 8001f48:	e000      	b.n	8001f4c <SPI_WaitFifoStateUntilTimeout+0x9a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001f4a:	2000      	movs	r0, #0
}
 8001f4c:	b002      	add	sp, #8
 8001f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f52 <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 8001f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f56:	4604      	mov	r4, r0
 8001f58:	460f      	mov	r7, r1
 8001f5a:	4616      	mov	r6, r2
 8001f5c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	f7fe ffad 	bl	8000ebc <HAL_GetTick>
 8001f62:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	6893      	ldr	r3, [r2, #8]
 8001f68:	403b      	ands	r3, r7
 8001f6a:	42b3      	cmp	r3, r6
 8001f6c:	d034      	beq.n	8001fd8 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f6e:	1c69      	adds	r1, r5, #1
 8001f70:	d0f9      	beq.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 8001f72:	b94d      	cbnz	r5, 8001f88 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f7c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f7e:	6862      	ldr	r2, [r4, #4]
 8001f80:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001f84:	d112      	bne.n	8001fac <SPI_WaitFlagStateUntilTimeout+0x5a>
 8001f86:	e006      	b.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0x44>

  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 8001f88:	f7fe ff98 	bl	8000ebc <HAL_GetTick>
 8001f8c:	ebc8 0000 	rsb	r0, r8, r0
 8001f90:	42a8      	cmp	r0, r5
 8001f92:	d3e7      	bcc.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0x12>
 8001f94:	e7ee      	b.n	8001f74 <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f96:	68a2      	ldr	r2, [r4, #8]
 8001f98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f9c:	d002      	beq.n	8001fa4 <SPI_WaitFlagStateUntilTimeout+0x52>
 8001f9e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001fa2:	d103      	bne.n	8001fac <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fb2:	d108      	bne.n	8001fc6 <SPI_WaitFlagStateUntilTimeout+0x74>
        {
          SPI_RESET_CRC(hspi);
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001fba:	400a      	ands	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001fd8:	2000      	movs	r0, #0
}
 8001fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fde <SPI_EndRxTxTransaction>:
  * @brief Handle the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8001fde:	b538      	push	{r3, r4, r5, lr}
 8001fe0:	460d      	mov	r5, r1
  /* Control if the TX fifo is empty */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001fe8:	462b      	mov	r3, r5
  * @brief Handle the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8001fea:	4604      	mov	r4, r0
  /* Control if the TX fifo is empty */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8001fec:	f7ff ff61 	bl	8001eb2 <SPI_WaitFifoStateUntilTimeout>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	b928      	cbnz	r0, 8002000 <SPI_EndRxTxTransaction+0x22>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	f7ff ffaa 	bl	8001f52 <SPI_WaitFlagStateUntilTimeout>
 8001ffe:	b120      	cbz	r0, 800200a <SPI_EndRxTxTransaction+0x2c>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8002000:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002008:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800200a:	bd38      	pop	{r3, r4, r5, pc}

0800200c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800200c:	4770      	bx	lr

0800200e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800200e:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002010:	4604      	mov	r4, r0
 8002012:	2800      	cmp	r0, #0
 8002014:	d051      	beq.n	80020ba <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002016:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800201a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201e:	b91b      	cbnz	r3, 8002028 <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002020:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002024:	f7ff fff2 	bl	800200c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002028:	2302      	movs	r3, #2
 800202a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800202e:	6823      	ldr	r3, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002030:	68e1      	ldr	r1, [r4, #12]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002032:	681a      	ldr	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002034:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f04f 0000 	mov.w	r0, #0

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002042:	d903      	bls.n	800204c <HAL_SPI_Init+0x3e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002044:	4602      	mov	r2, r0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 8002046:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800204a:	e001      	b.n	8002050 <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800204c:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002050:	bf18      	it	ne
 8002052:	62a0      	strne	r0, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002054:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002056:	b928      	cbnz	r0, 8002064 <HAL_SPI_Init+0x56>
  {
    /* CRC Length aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002058:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800205c:	bf8c      	ite	hi
 800205e:	2002      	movhi	r0, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002060:	2001      	movls	r0, #1
 8002062:	6320      	str	r0, [r4, #48]	; 0x30
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8002064:	6865      	ldr	r5, [r4, #4]
 8002066:	68a6      	ldr	r6, [r4, #8]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002068:	69a0      	ldr	r0, [r4, #24]
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800206a:	432e      	orrs	r6, r5
 800206c:	6925      	ldr	r5, [r4, #16]
 800206e:	432e      	orrs	r6, r5
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002070:	6965      	ldr	r5, [r4, #20]
 8002072:	432e      	orrs	r6, r5
 8002074:	69e5      	ldr	r5, [r4, #28]
 8002076:	432e      	orrs	r6, r5
 8002078:	6a25      	ldr	r5, [r4, #32]
 800207a:	432e      	orrs	r6, r5
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800207c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800207e:	4335      	orrs	r5, r6

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002080:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002084:	4335      	orrs	r5, r6
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8002086:	601d      	str	r5, [r3, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);

  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002088:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800208a:	2d02      	cmp	r5, #2
 800208c:	d103      	bne.n	8002096 <HAL_SPI_Init+0x88>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800208e:	681d      	ldr	r5, [r3, #0]
 8002090:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8002094:	601d      	str	r5, [r3, #0]
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8002096:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002098:	4329      	orrs	r1, r5
 800209a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800209c:	0c00      	lsrs	r0, r0, #16
 800209e:	430d      	orrs	r5, r1
 80020a0:	f000 0004 	and.w	r0, r0, #4
 80020a4:	4305      	orrs	r5, r0
                         hspi->Init.DataSize ) | frxth;
 80020a6:	432a      	orrs	r2, r5
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 80020a8:	605a      	str	r2, [r3, #4]
                         hspi->Init.DataSize ) | frxth;

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80020aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ac:	2000      	movs	r0, #0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
                         hspi->Init.DataSize ) | frxth;

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80020ae:	611a      	str	r2, [r3, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
 80020b0:	2301      	movs	r3, #1

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 80020b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;

  return HAL_OK;
}
 80020bc:	bd70      	pop	{r4, r5, r6, pc}

080020be <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80020be:	4770      	bx	lr

080020c0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80020c0:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80020c2:	4604      	mov	r4, r0
 80020c4:	b180      	cbz	r0, 80020e8 <HAL_SPI_DeInit+0x28>
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  hspi->State = HAL_SPI_STATE_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80020cc:	6803      	ldr	r3, [r0, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80020d6:	f7ff fff2 	bl	80020be <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020da:	2000      	movs	r0, #0
 80020dc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80020de:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d

  __HAL_UNLOCK(hspi);
 80020e2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c

  return HAL_OK;
 80020e6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;

  __HAL_UNLOCK(hspi);

  return HAL_OK;
}
 80020ea:	bd10      	pop	{r4, pc}

080020ec <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80020f0:	4604      	mov	r4, r0
 80020f2:	461f      	mov	r7, r3
 80020f4:	4689      	mov	r9, r1
 80020f6:	4692      	mov	sl, r2
 80020f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
__IO uint16_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 80020fa:	f7fe fedf 	bl	8000ebc <HAL_GetTick>
  HAL_StatusTypeDef errorcode = HAL_OK;

  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020fe:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002102:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
__IO uint16_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 8002104:	4680      	mov	r8, r0
  HAL_StatusTypeDef errorcode = HAL_OK;

  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002106:	f000 8127 	beq.w	8002358 <HAL_SPI_TransmitReceive+0x26c>

  if(hspi->State != HAL_SPI_STATE_READY)
 800210a:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;

  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800210e:	2301      	movs	r3, #1

  if(hspi->State != HAL_SPI_STATE_READY)
 8002110:	b2ed      	uxtb	r5, r5
 8002112:	429d      	cmp	r5, r3
  HAL_StatusTypeDef errorcode = HAL_OK;

  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002114:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

  if(hspi->State != HAL_SPI_STATE_READY)
 8002118:	f040 8115 	bne.w	8002346 <HAL_SPI_TransmitReceive+0x25a>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800211c:	f1b9 0f00 	cmp.w	r9, #0
 8002120:	f000 8112 	beq.w	8002348 <HAL_SPI_TransmitReceive+0x25c>
 8002124:	f1ba 0f00 	cmp.w	sl, #0
 8002128:	f000 810e 	beq.w	8002348 <HAL_SPI_TransmitReceive+0x25c>
 800212c:	2f00      	cmp	r7, #0
 800212e:	f000 810b 	beq.w	8002348 <HAL_SPI_TransmitReceive+0x25c>
  {
    errorcode = HAL_ERROR;
    goto error;
  }

  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8002132:	2305      	movs	r3, #5
 8002134:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800213c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    goto error;
  }

  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
 800213e:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  }

  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
  hspi->RxXferCount = Size;
 8002146:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800214a:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800214e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002152:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002154:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002156:	6822      	ldr	r2, [r4, #0]

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002158:	d108      	bne.n	800216c <HAL_SPI_TransmitReceive+0x80>
  {
    SPI_RESET_CRC(hspi);
 800215a:	6811      	ldr	r1, [r2, #0]
 800215c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002160:	400b      	ands	r3, r1
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800216a:	6013      	str	r3, [r2, #0]
  }

  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800216c:	68e3      	ldr	r3, [r4, #12]
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800216e:	6851      	ldr	r1, [r2, #4]
  {
    SPI_RESET_CRC(hspi);
  }

  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8002170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002174:	d801      	bhi.n	800217a <HAL_SPI_TransmitReceive+0x8e>
 8002176:	2f01      	cmp	r7, #1
 8002178:	d902      	bls.n	8002180 <HAL_SPI_TransmitReceive+0x94>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800217a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800217e:	e001      	b.n	8002184 <HAL_SPI_TransmitReceive+0x98>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002180:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002184:	6051      	str	r1, [r2, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002186:	6811      	ldr	r1, [r2, #0]
 8002188:	0649      	lsls	r1, r1, #25
 800218a:	d403      	bmi.n	8002194 <HAL_SPI_TransmitReceive+0xa8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800218c:	6811      	ldr	r1, [r2, #0]
 800218e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002192:	6011      	str	r1, [r2, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002198:	d941      	bls.n	800221e <HAL_SPI_TransmitReceive+0x132>
  {
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800219a:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800219c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80021a0:	b360      	cbz	r0, 80021fc <HAL_SPI_TransmitReceive+0x110>
    {
      /* Check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	0792      	lsls	r2, r2, #30
 80021a8:	d510      	bpl.n	80021cc <HAL_SPI_TransmitReceive+0xe0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 80021ac:	3801      	subs	r0, #1
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ae:	f832 5b02 	ldrh.w	r5, [r2], #2
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 80021b2:	b280      	uxth	r0, r0
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b4:	60dd      	str	r5, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80021b8:	87e0      	strh	r0, [r4, #62]	; 0x3e

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80021ba:	b938      	cbnz	r0, 80021cc <HAL_SPI_TransmitReceive+0xe0>
 80021bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021be:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021c2:	d103      	bne.n	80021cc <HAL_SPI_TransmitReceive+0xe0>
        {
          hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021ca:	601a      	str	r2, [r3, #0]
        }
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80021cc:	b169      	cbz	r1, 80021ea <HAL_SPI_TransmitReceive+0xfe>
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	07d7      	lsls	r7, r2, #31
 80021d4:	d509      	bpl.n	80021ea <HAL_SPI_TransmitReceive+0xfe>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021da:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021de:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80021e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80021e4:	3b01      	subs	r3, #1
 80021e6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80021ea:	1c75      	adds	r5, r6, #1
 80021ec:	d0d5      	beq.n	800219a <HAL_SPI_TransmitReceive+0xae>
 80021ee:	f7fe fe65 	bl	8000ebc <HAL_GetTick>
 80021f2:	ebc8 0000 	rsb	r0, r8, r0
 80021f6:	42b0      	cmp	r0, r6
 80021f8:	d3cf      	bcc.n	800219a <HAL_SPI_TransmitReceive+0xae>
 80021fa:	e082      	b.n	8002302 <HAL_SPI_TransmitReceive+0x216>
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 80021fc:	2900      	cmp	r1, #0
 80021fe:	d1e5      	bne.n	80021cc <HAL_SPI_TransmitReceive+0xe0>
      }
    }
  }

  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	f040 8085 	bne.w	8002314 <HAL_SPI_TransmitReceive+0x228>
 800220a:	e057      	b.n	80022bc <HAL_SPI_TransmitReceive+0x1d0>
  else
  {
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6891      	ldr	r1, [r2, #8]
 8002210:	0788      	lsls	r0, r1, #30
 8002212:	d408      	bmi.n	8002226 <HAL_SPI_TransmitReceive+0x13a>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
        }
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8002214:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002218:	bb12      	cbnz	r2, 8002260 <HAL_SPI_TransmitReceive+0x174>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800221a:	1c77      	adds	r7, r6, #1
 800221c:	d142      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x1b8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800221e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f3      	bne.n	800220c <HAL_SPI_TransmitReceive+0x120>
 8002224:	e045      	b.n	80022b2 <HAL_SPI_TransmitReceive+0x1c6>
    {
      /* check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 1)
 8002226:	2b01      	cmp	r3, #1
 8002228:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800222a:	d905      	bls.n	8002238 <HAL_SPI_TransmitReceive+0x14c>
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800222c:	f831 0b02 	ldrh.w	r0, [r1], #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 8002230:	3b02      	subs	r3, #2
      /* check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 1)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002232:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002234:	63a1      	str	r1, [r4, #56]	; 0x38
 8002236:	e005      	b.n	8002244 <HAL_SPI_TransmitReceive+0x158>
          hspi->TxXferCount -= 2;
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002238:	1c4b      	adds	r3, r1, #1
 800223a:	63a3      	str	r3, [r4, #56]	; 0x38
 800223c:	780b      	ldrb	r3, [r1, #0]
 800223e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8002240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002242:	3b01      	subs	r3, #1
 8002244:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002246:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e3      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x128>
 800224c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	d1df      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x128>
        {
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e7d9      	b.n	8002214 <HAL_SPI_TransmitReceive+0x128>
        }
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	07c9      	lsls	r1, r1, #31
 8002266:	d5d8      	bpl.n	800221a <HAL_SPI_TransmitReceive+0x12e>
      {
        if(hspi->RxXferCount > 1)
 8002268:	2a01      	cmp	r2, #1
 800226a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800226c:	d910      	bls.n	8002290 <HAL_SPI_TransmitReceive+0x1a4>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	f822 1b02 	strh.w	r1, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002274:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 8002276:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800227a:	3a02      	subs	r2, #2
 800227c:	b292      	uxth	r2, r2
          if(hspi->RxXferCount <= 1)
 800227e:	2a01      	cmp	r2, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 8002280:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 8002284:	d8c9      	bhi.n	800221a <HAL_SPI_TransmitReceive+0x12e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e7c4      	b.n	800221a <HAL_SPI_TransmitReceive+0x12e>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 8002290:	1c51      	adds	r1, r2, #1
 8002292:	6421      	str	r1, [r4, #64]	; 0x40
 8002294:	7b1b      	ldrb	r3, [r3, #12]
 8002296:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 8002298:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800229c:	3b01      	subs	r3, #1
 800229e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80022a2:	e7ba      	b.n	800221a <HAL_SPI_TransmitReceive+0x12e>
        }
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80022a4:	f7fe fe0a 	bl	8000ebc <HAL_GetTick>
 80022a8:	ebc8 0000 	rsb	r0, r8, r0
 80022ac:	42b0      	cmp	r0, r6
 80022ae:	d3b6      	bcc.n	800221e <HAL_SPI_TransmitReceive+0x132>
 80022b0:	e027      	b.n	8002302 <HAL_SPI_TransmitReceive+0x216>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 80022b2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ac      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x128>
 80022ba:	e7a1      	b.n	8002200 <HAL_SPI_TransmitReceive+0x114>

  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 80022bc:	2101      	movs	r1, #1
 80022be:	4620      	mov	r0, r4
 80022c0:	460a      	mov	r2, r1
 80022c2:	4633      	mov	r3, r6
 80022c4:	f7ff fe45 	bl	8001f52 <SPI_WaitFlagStateUntilTimeout>
 80022c8:	b9b8      	cbnz	r0, 80022fa <HAL_SPI_TransmitReceive+0x20e>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
      errorcode = HAL_TIMEOUT;
      goto error;
    }

    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ca:	68e3      	ldr	r3, [r4, #12]
 80022cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	d102      	bne.n	80022da <HAL_SPI_TransmitReceive+0x1ee>
    {
      tmpreg = hspi->Instance->DR;
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	e018      	b.n	800230c <HAL_SPI_TransmitReceive+0x220>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80022da:	7b1b      	ldrb	r3, [r3, #12]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f8ad 3006 	strh.w	r3, [sp, #6]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80022e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]

      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80022e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d113      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x228>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 80022ec:	2101      	movs	r1, #1
 80022ee:	4620      	mov	r0, r4
 80022f0:	460a      	mov	r2, r1
 80022f2:	4633      	mov	r3, r6
 80022f4:	f7ff fe2d 	bl	8001f52 <SPI_WaitFlagStateUntilTimeout>
 80022f8:	b128      	cbz	r0, 8002306 <HAL_SPI_TransmitReceive+0x21a>
        {
          /* Error on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80022fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8002302:	2503      	movs	r5, #3
          goto error;
 8002304:	e020      	b.n	8002348 <HAL_SPI_TransmitReceive+0x25c>
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	7b1b      	ldrb	r3, [r3, #12]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f8ad 3006 	strh.w	r3, [sp, #6]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 8002310:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      }
    }
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	689d      	ldr	r5, [r3, #8]
 8002318:	f015 0510 	ands.w	r5, r5, #16
 800231c:	d007      	beq.n	800232e <HAL_SPI_TransmitReceive+0x242>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800231e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002320:	f042 0202 	orr.w	r2, r2, #2
 8002324:	6622      	str	r2, [r4, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002326:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800232a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800232c:	2501      	movs	r5, #1
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800232e:	4620      	mov	r0, r4
 8002330:	4631      	mov	r1, r6
 8002332:	f7ff fe54 	bl	8001fde <SPI_EndRxTxTransaction>
 8002336:	b108      	cbz	r0, 800233c <HAL_SPI_TransmitReceive+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002338:	2320      	movs	r3, #32
 800233a:	6623      	str	r3, [r4, #96]	; 0x60
  }

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800233c:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    errorcode = HAL_ERROR;
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf18      	it	ne
 8002342:	2501      	movne	r5, #1
 8002344:	e000      	b.n	8002348 <HAL_SPI_TransmitReceive+0x25c>
  /* Process Locked */
  __HAL_LOCK(hspi);

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8002346:	2502      	movs	r5, #2
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002348:	2301      	movs	r3, #1
 800234a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800234e:	2300      	movs	r3, #0
 8002350:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8002354:	4628      	mov	r0, r5
 8002356:	e000      	b.n	800235a <HAL_SPI_TransmitReceive+0x26e>
  HAL_StatusTypeDef errorcode = HAL_OK;

  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002358:	2002      	movs	r0, #2

error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 800235a:	b002      	add	sp, #8
 800235c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002360 <HAL_SPI_GetState>:
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  /* Return SPI handle state */
  return hspi->State;
 8002360:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8002364:	4770      	bx	lr
	...

08002368 <BSP_GYRO_Init>:
/**
  * @brief  Set GYROSCOPE Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002368:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800236a:	4c0e      	ldr	r4, [pc, #56]	; (80023a4 <BSP_GYRO_Init+0x3c>)
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	4798      	blx	r3
 8002370:	28d4      	cmp	r0, #212	; 0xd4
 8002372:	4625      	mov	r5, r4
 8002374:	d10f      	bne.n	8002396 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002376:	4c0c      	ldr	r4, [pc, #48]	; (80023a8 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8002378:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800237a:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800237c:	f241 003f 	movw	r0, #4159	; 0x103f
 8002380:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	2000      	movs	r0, #0
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	2010      	movs	r0, #16
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	4798      	blx	r3
	
    ret = GYRO_OK;
 8002392:	2000      	movs	r0, #0
 8002394:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002396:	6863      	ldr	r3, [r4, #4]
 8002398:	4798      	blx	r3
 800239a:	28d5      	cmp	r0, #213	; 0xd5
 800239c:	d0eb      	beq.n	8002376 <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 800239e:	2001      	movs	r0, #1
  }
  
  return ret;
}
 80023a0:	bd38      	pop	{r3, r4, r5, pc}
 80023a2:	bf00      	nop
 80023a4:	200004fc 	.word	0x200004fc
 80023a8:	200005f4 	.word	0x200005f4

080023ac <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80023ac:	b508      	push	{r3, lr}
  if(GyroscopeDrv->GetXYZ!= NULL)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <BSP_GYRO_GetXYZ+0x10>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	b103      	cbz	r3, 80023b8 <BSP_GYRO_GetXYZ+0xc>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80023b6:	4798      	blx	r3
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop
 80023bc:	200005f4 	.word	0x200005f4

080023c0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80023c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface */
  GYRO_IO_Init();
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80023c2:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 80023c4:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80023c6:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 80023c8:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80023cc:	f7ff f888 	bl	80014e0 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80023d0:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80023d4:	2120      	movs	r1, #32
 80023d6:	4620      	mov	r0, r4
 80023d8:	2201      	movs	r2, #1
 80023da:	f7ff f8bf 	bl	800155c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80023de:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80023e0:	4620      	mov	r0, r4
 80023e2:	2123      	movs	r1, #35	; 0x23
 80023e4:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80023e6:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80023ea:	f7ff f8b7 	bl	800155c <GYRO_IO_Write>
}
 80023ee:	b003      	add	sp, #12
 80023f0:	bd30      	pop	{r4, r5, pc}

080023f2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80023f2:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80023f4:	f7ff f874 	bl	80014e0 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80023f8:	f10d 0007 	add.w	r0, sp, #7
 80023fc:	210f      	movs	r1, #15
 80023fe:	2201      	movs	r2, #1
 8002400:	f7ff f8ce 	bl	80015a0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
}
 8002404:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002408:	b003      	add	sp, #12
 800240a:	f85d fb04 	ldr.w	pc, [sp], #4

0800240e <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800240e:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002410:	2124      	movs	r1, #36	; 0x24
 8002412:	f10d 0007 	add.w	r0, sp, #7
 8002416:	2201      	movs	r2, #1
 8002418:	f7ff f8c2 	bl	80015a0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800241c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002420:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002424:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002428:	2124      	movs	r1, #36	; 0x24
 800242a:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800242c:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002430:	f7ff f894 	bl	800155c <GYRO_IO_Write>
}
 8002434:	b003      	add	sp, #12
 8002436:	f85d fb04 	ldr.w	pc, [sp], #4

0800243a <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800243a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800243c:	2300      	movs	r3, #0
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800243e:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002440:	2130      	movs	r1, #48	; 0x30
 8002442:	f10d 0006 	add.w	r0, sp, #6
 8002446:	2201      	movs	r2, #1
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002448:	f88d 3006 	strb.w	r3, [sp, #6]
 800244c:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002450:	f7ff f8a6 	bl	80015a0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002454:	f10d 0007 	add.w	r0, sp, #7
 8002458:	2122      	movs	r1, #34	; 0x22
 800245a:	2201      	movs	r2, #1
 800245c:	f7ff f8a0 	bl	80015a0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8002460:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002464:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002468:	f88d 3006 	strb.w	r3, [sp, #6]
  
  ctrl3 &= 0xDF;
 800246c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002470:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 8002474:	431c      	orrs	r4, r3
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002476:	f10d 0006 	add.w	r0, sp, #6
 800247a:	2130      	movs	r1, #48	; 0x30
 800247c:	2201      	movs	r2, #1
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);   
 800247e:	f88d 4007 	strb.w	r4, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002482:	f7ff f86b 	bl	800155c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002486:	f10d 0007 	add.w	r0, sp, #7
 800248a:	2122      	movs	r1, #34	; 0x22
 800248c:	2201      	movs	r2, #1
 800248e:	f7ff f865 	bl	800155c <GYRO_IO_Write>
}
 8002492:	b002      	add	sp, #8
 8002494:	bd10      	pop	{r4, pc}

08002496 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8002496:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002498:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800249a:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800249c:	2122      	movs	r1, #34	; 0x22
 800249e:	f10d 0007 	add.w	r0, sp, #7
 80024a2:	f7ff f87d 	bl	80015a0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80024a6:	b924      	cbnz	r4, 80024b2 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 80024a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80024ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024b0:	e007      	b.n	80024c2 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 80024b2:	2c01      	cmp	r4, #1
 80024b4:	d107      	bne.n	80024c6 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 80024b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024ba:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024c6:	f10d 0007 	add.w	r0, sp, #7
 80024ca:	2122      	movs	r1, #34	; 0x22
 80024cc:	2201      	movs	r2, #1
 80024ce:	f7ff f845 	bl	800155c <GYRO_IO_Write>
}
 80024d2:	b002      	add	sp, #8
 80024d4:	bd10      	pop	{r4, pc}

080024d6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80024d6:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024d8:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80024da:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024dc:	2122      	movs	r1, #34	; 0x22
 80024de:	f10d 0007 	add.w	r0, sp, #7
 80024e2:	f7ff f85d 	bl	80015a0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80024e6:	b924      	cbnz	r4, 80024f2 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 80024e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f0:	e005      	b.n	80024fe <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 80024f2:	2c01      	cmp	r4, #1
 80024f4:	d105      	bne.n	8002502 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 80024f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024fa:	f023 0308 	bic.w	r3, r3, #8
 80024fe:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002502:	f10d 0007 	add.w	r0, sp, #7
 8002506:	2122      	movs	r1, #34	; 0x22
 8002508:	2201      	movs	r2, #1
 800250a:	f7ff f827 	bl	800155c <GYRO_IO_Write>
}
 800250e:	b002      	add	sp, #8
 8002510:	bd10      	pop	{r4, pc}

08002512 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8002512:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002514:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8002516:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002518:	2121      	movs	r1, #33	; 0x21
 800251a:	f10d 0007 	add.w	r0, sp, #7
 800251e:	f7ff f83f 	bl	80015a0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8002522:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800252a:	431c      	orrs	r4, r3
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800252c:	f10d 0007 	add.w	r0, sp, #7
 8002530:	2121      	movs	r1, #33	; 0x21
 8002532:	2201      	movs	r2, #1
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8002534:	f88d 4007 	strb.w	r4, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002538:	f7ff f810 	bl	800155c <GYRO_IO_Write>
}
 800253c:	b002      	add	sp, #8
 800253e:	bd10      	pop	{r4, pc}

08002540 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8002540:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002542:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8002544:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002546:	2124      	movs	r1, #36	; 0x24
 8002548:	f10d 0007 	add.w	r0, sp, #7
 800254c:	f7ff f828 	bl	80015a0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8002550:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002554:	f023 0310 	bic.w	r3, r3, #16
  
  tmpreg |= HighPassFilterState;
 8002558:	431c      	orrs	r4, r3
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800255a:	f10d 0007 	add.w	r0, sp, #7
 800255e:	2124      	movs	r1, #36	; 0x24
 8002560:	2201      	movs	r2, #1
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  tmpreg &= 0xEF;
  
  tmpreg |= HighPassFilterState;
 8002562:	f88d 4007 	strb.w	r4, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002566:	f7fe fff9 	bl	800155c <GYRO_IO_Write>
}
 800256a:	b002      	add	sp, #8
 800256c:	bd10      	pop	{r4, pc}
	...

08002570 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	4680      	mov	r8, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8002578:	a806      	add	r0, sp, #24
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
  uint8_t tmpbuffer[6] ={0};
 800257a:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 800257c:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002580:	2123      	movs	r1, #35	; 0x23
 8002582:	2201      	movs	r2, #1
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 800258a:	9304      	str	r3, [sp, #16]
 800258c:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002590:	f7ff f806 	bl	80015a0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002594:	2128      	movs	r1, #40	; 0x28
 8002596:	2206      	movs	r2, #6
 8002598:	a802      	add	r0, sp, #8
 800259a:	f7ff f801 	bl	80015a0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800259e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025a2:	f89d 6009 	ldrb.w	r6, [sp, #9]
 80025a6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80025aa:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80025ae:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80025b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80025b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80025ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025be:	d11a      	bne.n	80025f6 <L3GD20_ReadXYZAngRate+0x86>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80025c0:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 80025c4:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 80025c8:	f8ad 6010 	strh.w	r6, [sp, #16]
 80025cc:	f8ad 4012 	strh.w	r4, [sp, #18]
 80025d0:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80025d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025d8:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80025da:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80025de:	d015      	beq.n	800260c <L3GD20_ReadXYZAngRate+0x9c>
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d016      	beq.n	8002612 <L3GD20_ReadXYZAngRate+0xa2>
void L3GD20_ReadXYZAngRate(float *pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 80025e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800263c <L3GD20_ReadXYZAngRate+0xcc>
 80025e8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002640 <L3GD20_ReadXYZAngRate+0xd0>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf08      	it	eq
 80025f0:	eef0 7a47 	vmoveq.f32	s15, s14
 80025f4:	e00f      	b.n	8002616 <L3GD20_ReadXYZAngRate+0xa6>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80025f6:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 80025fa:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80025fe:	f8ad 6010 	strh.w	r6, [sp, #16]
 8002602:	f8ad 4012 	strh.w	r4, [sp, #18]
 8002606:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800260a:	e7e3      	b.n	80025d4 <L3GD20_ReadXYZAngRate+0x64>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800260c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002644 <L3GD20_ReadXYZAngRate+0xd4>
    break;
 8002610:	e001      	b.n	8002616 <L3GD20_ReadXYZAngRate+0xa6>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002612:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002648 <L3GD20_ReadXYZAngRate+0xd8>
 8002616:	4640      	mov	r0, r8
 8002618:	2300      	movs	r3, #0
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800261a:	aa04      	add	r2, sp, #16
 800261c:	5e9a      	ldrsh	r2, [r3, r2]
 800261e:	ee07 2a10 	vmov	s14, r2
 8002622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002626:	3302      	adds	r3, #2
 8002628:	ee27 7a27 	vmul.f32	s14, s14, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800262c:	2b06      	cmp	r3, #6
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800262e:	eca0 7a01 	vstmia	r0!, {s14}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002632:	d1f2      	bne.n	800261a <L3GD20_ReadXYZAngRate+0xaa>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8002634:	b006      	add	sp, #24
 8002636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263a:	bf00      	nop
 800263c:	00000000 	.word	0x00000000
 8002640:	410c0000 	.word	0x410c0000
 8002644:	418c0000 	.word	0x418c0000
 8002648:	428c0000 	.word	0x428c0000

0800264c <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 800264c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 800264e:	f7ff fb03 	bl	8001c58 <BSP_ACCELERO_Init>
 8002652:	b108      	cbz	r0, 8002658 <ACCELERO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002654:	f7fd ff82 	bl	800055c <Error_Handler>
  }
  
  UserPressButton = 0;
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <ACCELERO_MEMS_Test+0xbc>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	461d      	mov	r5, r3
  while(!UserPressButton)
 8002660:	782b      	ldrb	r3, [r5, #0]
 8002662:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14c      	bne.n	8002704 <ACCELERO_MEMS_Test+0xb8>
{
  int16_t buffer[3] = {0};
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 800266a:	4668      	mov	r0, sp
  }
}  

static void ACCELERO_ReadAcc(void)
{
  int16_t buffer[3] = {0};
 800266c:	9400      	str	r4, [sp, #0]
 800266e:	f8ad 4004 	strh.w	r4, [sp, #4]
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002672:	f7ff fb09 	bl	8001c88 <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
  yval = buffer[1];
    
  if((ABS(xval))>(ABS(yval)))
 8002676:	f9bd 2000 	ldrsh.w	r2, [sp]
 800267a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800267e:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8002682:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 8002686:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800268a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800268e:	4288      	cmp	r0, r1
 8002690:	dd0d      	ble.n	80026ae <ACCELERO_MEMS_Test+0x62>
  {
    if(xval > ThresholdHigh)
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <ACCELERO_MEMS_Test+0xc0>)
 8002694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002698:	4293      	cmp	r3, r2
 800269a:	da01      	bge.n	80026a0 <ACCELERO_MEMS_Test+0x54>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 800269c:	2007      	movs	r0, #7
 800269e:	e013      	b.n	80026c8 <ACCELERO_MEMS_Test+0x7c>
      HAL_Delay(10);
    }
    else if(xval < ThresholdLow)
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <ACCELERO_MEMS_Test+0xc4>)
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	dd10      	ble.n	80026cc <ACCELERO_MEMS_Test+0x80>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 80026aa:	4620      	mov	r0, r4
 80026ac:	e00c      	b.n	80026c8 <ACCELERO_MEMS_Test+0x7c>
      HAL_Delay(10);
    }
  }
  else
  {
    if(yval < ThresholdLow)
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <ACCELERO_MEMS_Test+0xc4>)
 80026b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dd01      	ble.n	80026bc <ACCELERO_MEMS_Test+0x70>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 80026b8:	2004      	movs	r0, #4
 80026ba:	e005      	b.n	80026c8 <ACCELERO_MEMS_Test+0x7c>
      HAL_Delay(10);
    }
    else if(yval > ThresholdHigh)
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <ACCELERO_MEMS_Test+0xc0>)
 80026be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	da02      	bge.n	80026cc <ACCELERO_MEMS_Test+0x80>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 80026c6:	2003      	movs	r0, #3
 80026c8:	f7fe fe90 	bl	80013ec <BSP_LED_On>
      HAL_Delay(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f7fe fbfb 	bl	8000ec8 <HAL_Delay>
  {	    
      HAL_Delay(10);
    }
  } 
  
     BSP_LED_Off(LED3);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fe98 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED6);
 80026d8:	2003      	movs	r0, #3
 80026da:	f7fe fe95 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED7);
 80026de:	2004      	movs	r0, #4
 80026e0:	f7fe fe92 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED4);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe fe8f 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED10);
 80026ea:	2007      	movs	r0, #7
 80026ec:	f7fe fe8c 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED8);
 80026f0:	2005      	movs	r0, #5
 80026f2:	f7fe fe89 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED9);
 80026f6:	2006      	movs	r0, #6
 80026f8:	f7fe fe86 	bl	8001408 <BSP_LED_Off>
     BSP_LED_Off(LED5);
 80026fc:	2002      	movs	r0, #2
 80026fe:	f7fe fe83 	bl	8001408 <BSP_LED_Off>
 8002702:	e7ad      	b.n	8002660 <ACCELERO_MEMS_Test+0x14>
  UserPressButton = 0;
  while(!UserPressButton)
  {
    ACCELERO_ReadAcc();
  }
}  
 8002704:	b003      	add	sp, #12
 8002706:	bd30      	pop	{r4, r5, pc}
 8002708:	20000548 	.word	0x20000548
 800270c:	2000052a 	.word	0x2000052a
 8002710:	20000528 	.word	0x20000528

08002714 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8002714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002716:	f7ff fa9f 	bl	8001c58 <BSP_ACCELERO_Init>
 800271a:	b108      	cbz	r0, 8002720 <GYRO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 800271c:	f7fd ff1e 	bl	800055c <Error_Handler>
  }
  
  UserPressButton = 0;
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <GYRO_MEMS_Test+0xe8>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	461c      	mov	r4, r3
  while(!UserPressButton)
 8002728:	7823      	ldrb	r3, [r4, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d163      	bne.n	80027f6 <GYRO_MEMS_Test+0xe2>
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval = 0x00;

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 800272e:	f7ff fe1b 	bl	8002368 <BSP_GYRO_Init>
 8002732:	b108      	cbz	r0, 8002738 <GYRO_MEMS_Test+0x24>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002734:	f7fd ff12 	bl	800055c <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 8002738:	a801      	add	r0, sp, #4
 800273a:	f7ff fe37 	bl	80023ac <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = ABS((Buffer[0]));
 800273e:	ed9d 7a01 	vldr	s14, [sp, #4]
  Yval = ABS((Buffer[1])); 
 8002742:	eddd 7a02 	vldr	s15, [sp, #8]

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
     
  /* Update autoreload and capture compare registers value*/
  Xval = ABS((Buffer[0]));
 8002746:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  Yval = ABS((Buffer[1])); 
 800274e:	eef5 7ac0 	vcmpe.f32	s15, #0.0

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
     
  /* Update autoreload and capture compare registers value*/
  Xval = ABS((Buffer[0]));
 8002752:	bf4c      	ite	mi
 8002754:	eeb1 6a47 	vnegmi.f32	s12, s14
 8002758:	eeb0 6a47 	vmovpl.f32	s12, s14
  Yval = ABS((Buffer[1])); 
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	bf4c      	ite	mi
 8002762:	eef1 6a67 	vnegmi.f32	s13, s15
 8002766:	eef0 6a67 	vmovpl.f32	s13, s15
      
  if(Xval>Yval)
 800276a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	dd11      	ble.n	8002798 <GYRO_MEMS_Test+0x84>
   {
    if(Buffer[0] > 5000.0f)
 8002774:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002800 <GYRO_MEMS_Test+0xec>
 8002778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dd01      	ble.n	8002786 <GYRO_MEMS_Test+0x72>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 8002782:	2007      	movs	r0, #7
 8002784:	e019      	b.n	80027ba <GYRO_MEMS_Test+0xa6>
        HAL_Delay(10);
     }
     else if(Buffer[0] < -5000.0f)
 8002786:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002804 <GYRO_MEMS_Test+0xf0>
 800278a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d514      	bpl.n	80027be <GYRO_MEMS_Test+0xaa>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 8002794:	2000      	movs	r0, #0
 8002796:	e010      	b.n	80027ba <GYRO_MEMS_Test+0xa6>
      HAL_Delay(10);
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 8002798:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002804 <GYRO_MEMS_Test+0xf0>
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d501      	bpl.n	80027aa <GYRO_MEMS_Test+0x96>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 80027a6:	2003      	movs	r0, #3
 80027a8:	e007      	b.n	80027ba <GYRO_MEMS_Test+0xa6>
        HAL_Delay(10);
     }
    else if(Buffer[1] > 5000.0f)
 80027aa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002800 <GYRO_MEMS_Test+0xec>
 80027ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	dd02      	ble.n	80027be <GYRO_MEMS_Test+0xaa>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 80027b8:	2004      	movs	r0, #4
 80027ba:	f7fe fe17 	bl	80013ec <BSP_LED_On>
	HAL_Delay(10);
 80027be:	200a      	movs	r0, #10
 80027c0:	f7fe fb82 	bl	8000ec8 <HAL_Delay>
        else
        { 
            HAL_Delay(10);
        }  	
      } 
    BSP_LED_Off(LED3);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fe1f 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f7fe fe1c 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED7);
 80027d0:	2004      	movs	r0, #4
 80027d2:	f7fe fe19 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f7fe fe16 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED10);
 80027dc:	2007      	movs	r0, #7
 80027de:	f7fe fe13 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED8);
 80027e2:	2005      	movs	r0, #5
 80027e4:	f7fe fe10 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED9);
 80027e8:	2006      	movs	r0, #6
 80027ea:	f7fe fe0d 	bl	8001408 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 80027ee:	2002      	movs	r0, #2
 80027f0:	f7fe fe0a 	bl	8001408 <BSP_LED_Off>
 80027f4:	e798      	b.n	8002728 <GYRO_MEMS_Test+0x14>
  UserPressButton = 0;
  while(!UserPressButton)
  {
    GYRO_ReadAng();
  }
}  
 80027f6:	b004      	add	sp, #16
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop
 80027fc:	20000548 	.word	0x20000548
 8002800:	459c4000 	.word	0x459c4000
 8002804:	c59c4000 	.word	0xc59c4000

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
