
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800107c l    d  .rodata	00000000 .rodata
080010b4 l    d  .init_array	00000000 .init_array
080010bc l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
2000042c l    d  .bss	00000000 .bss
20000460 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 /tmp/ccbxEu9O.o
f1e0f85f l       *ABS*	00000000 BootRAM
080003c0 l       .text	00000000 LoopCopyDataInit
080003b8 l       .text	00000000 CopyDataInit
080003d4 l       .text	00000000 LoopFillZerobss
080003ce l       .text	00000000 FillZerobss
080003e6 l       .text	00000000 LoopForever
08000400 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08001064 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001b0 l     F .text	00000000 register_tm_clones
080001e0 l     F .text	00000000 __do_global_dtors_aux
2000042c l       .bss	00000000 completed.6140
080010bc l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000210 l     F .text	00000000 frame_dummy
20000430 l       .bss	00000000 object.6145
080010b8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08000398 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 main.c
20000448 l     O .bss	00000014 GPIO_InitStruct
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_it.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
2000045c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
080010c0 l       .fini_array	00000000 __fini_array_end
2000042c l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 HAL_SPI_Init
00000000 l       *UND*	00000000 HAL_SPI_DeInit
20000460 l       ._user_heap_stack	00000000 end
20000460 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 HAL_SPI_GetState
080010bc l       .fini_array	00000000 __fini_array_start
00000000 l       *UND*	00000000 HAL_SPI_TransmitReceive
080010bc l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 __end__
080010b4 l       .init_array	00000000 __preinit_array_end
080010b4 l       .init_array	00000000 __init_array_start
080010b4 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 free
08000400  w    F .text	00000002 RTC_Alarm_IRQHandler
08000400  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08000400  w    F .text	00000002 TIM8_CC_IRQHandler
08000508 g     F .text	00000002 DebugMon_Handler
08000e28 g     F .text	00000064 HAL_NVIC_SetPriority
08000400  w    F .text	00000002 TIM1_CC_IRQHandler
080004fe g     F .text	00000002 HardFault_Handler
08000400  w    F .text	00000002 USB_HP_IRQHandler
0800050c g     F .text	00000004 SysTick_Handler
08000400  w    F .text	00000002 PVD_IRQHandler
08000400  w    F .text	00000002 TAMP_STAMP_IRQHandler
080010c0 g       *ABS*	00000000 _sidata
08000d4c g     F .text	00000034 HAL_RCC_GetHCLKFreq
0800050a g     F .text	00000002 PendSV_Handler
080004fc g     F .text	00000002 NMI_Handler
080010b4 g       .init_array	00000000 __exidx_end
08000400  w    F .text	00000002 EXTI3_IRQHandler
08000ce8 g     F .text	00000064 HAL_RCC_GetSysClockFreq
080010a4 g     O .rodata	00000010 aAPBAHBPrescTable
08000d80  w    F .text	00000002 HAL_MspInit
0800105c g     F .text	00000008 HAL_GPIO_TogglePin
0800107c g       .text	00000000 _etext
2000042c g       .bss	00000000 _sbss
08000eb8 g     F .text	000001a4 HAL_GPIO_Init
2000042c g     O .data	00000000 .hidden __TMC_END__
08000400  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08000400  w    F .text	00000002 EXTI0_IRQHandler
08000400  w    F .text	00000002 I2C2_EV_IRQHandler
08000de8  w    F .text	0000001a HAL_Delay
08000400  w    F .text	00000002 FPU_IRQHandler
20000428 g     O .data	00000004 SystemCoreClock
08000400  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
00000000  w      *UND*	00000000 malloc
08000504 g     F .text	00000002 UsageFault_Handler
08000400  w    F .text	00000002 ADC1_2_IRQHandler
20000000 g       .data	00000000 _sdata
08000400  w    F .text	00000002 SPI1_IRQHandler
08000400  w    F .text	00000002 CAN_SCE_IRQHandler
08000400  w    F .text	00000002 TIM6_DAC_IRQHandler
08000e8c g     F .text	0000002c HAL_SYSTICK_Config
08000400  w    F .text	00000002 TIM8_UP_IRQHandler
080010b4 g       .init_array	00000000 __exidx_start
08001080 g     O .rodata	00000004 _global_impure_ptr
08000290 g     F .text	0000005a __libc_init_array
08000400  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel4_IRQHandler
08001064 g     F .text	00000000 _init
08000400  w    F .text	00000002 USART3_IRQHandler
0800025c g     F .text	00000032 __libc_fini_array
08001084 g     O .rodata	00000010 aPredivFactorTable
20000460 g       .bss	00000000 _ebss
08000400  w    F .text	00000002 DMA1_Channel7_IRQHandler
080003b0  w    F .text	00000038 Reset_Handler
08000400  w    F .text	00000002 UART5_IRQHandler
08000400  w    F .text	00000002 ADC3_IRQHandler
08000da8 g     F .text	00000024 HAL_Init
08000400  w    F .text	00000002 TIM4_IRQHandler
08000400  w    F .text	00000002 CAN_RX1_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel1_IRQHandler
00000000  w      *UND*	00000000 __deregister_frame_info
08000400  w    F .text	00000002 I2C1_EV_IRQHandler
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
08000400  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000400  w    F .text	00000002 UART4_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel4_IRQHandler
08000400  w    F .text	00000002 TIM3_IRQHandler
08000400  w    F .text	00000002 RCC_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000400 g       .text	00000002 Default_Handler
08000400  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08000400  w    F .text	00000002 EXTI15_10_IRQHandler
080002ec g     F .text	000000ac __register_exitproc
08000ab0 g     F .text	00000238 HAL_RCC_ClockConfig
08000e04 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
08000400  w    F .text	00000002 TIM7_IRQHandler
08001094 g     O .rodata	00000010 aPLLMULFactorTable
08000400  w    F .text	00000002 EXTI9_5_IRQHandler
08000400  w    F .text	00000002 RTC_WKUP_IRQHandler
08000ddc  w    F .text	0000000c HAL_GetTick
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
08000400  w    F .text	00000002 SPI2_IRQHandler
08000400  w    F .text	00000002 USB_LP_CAN_RX0_IRQHandler
08000500 g     F .text	00000002 MemManage_Handler
08000404 g     F .text	00000090 main
080014ec g       *ABS*	00000000 _siccmram
08000506 g     F .text	00000002 SVC_Handler
08000400  w    F .text	00000002 DMA2_Channel5_IRQHandler
00000000  w      *UND*	00000000 __libc_fini
08000400  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000400  w    F .text	00000002 USB_LP_IRQHandler
08000400  w    F .text	00000002 EXTI4_IRQHandler
08000494 g     F .text	00000068 SystemInit
08001070 g     F .text	00000000 _fini
08000400  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000250 g     F .text	0000000c atexit
10000000 g       .data	00000000 _eccmram
08000400  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000d82  w    F .text	00000024 HAL_InitTick
08000dcc  w    F .text	00000010 HAL_IncTick
08000400  w    F .text	00000002 ADC4_IRQHandler
08000400  w    F .text	00000002 WWDG_IRQHandler
08000400  w    F .text	00000002 TIM2_IRQHandler
08000400  w    F .text	00000002 COMP7_IRQHandler
20009fff g       *ABS*	00000000 _estack
08000400  w    F .text	00000002 COMP1_2_3_IRQHandler
08000400  w    F .text	00000002 EXTI1_IRQHandler
2000042c g       .data	00000000 _edata
10000000 g       .data	00000000 _sccmram
08000400  w    F .text	00000002 USART2_IRQHandler
08000400  w    F .text	00000002 COMP4_5_6_IRQHandler
08000510 g     F .text	000005a0 HAL_RCC_OscConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000400  w    F .text	00000002 I2C2_ER_IRQHandler
08000400  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000400  w    F .text	00000002 TIM8_BRK_IRQHandler
08000400  w    F .text	00000002 FLASH_IRQHandler
08000502 g     F .text	00000002 BusFault_Handler
08000400  w    F .text	00000002 USART1_IRQHandler
08000400  w    F .text	00000002 SPI3_IRQHandler
08000400  w    F .text	00000002 I2C1_ER_IRQHandler
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000000  w      *UND*	00000000 __register_frame_info
08000400  w    F .text	00000002 USBWakeUp_IRQHandler
08000400  w    F .text	00000002 DMA2_Channel3_IRQHandler
08000400  w    F .text	00000002 EXTI2_TSC_IRQHandler
08000400  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f240 402c 	movw	r0, #1068	; 0x42c
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	2000042f 	.word	0x2000042f

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f240 402c 	movw	r0, #1068	; 0x42c
 80001b6:	f240 432c 	movw	r3, #1068	; 0x42c
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f240 442c 	movw	r4, #1068	; 0x42c
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f241 0064 	movw	r0, #4196	; 0x1064
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f241 0064 	movw	r0, #4196	; 0x1064
 8000220:	f240 4130 	movw	r1, #1072	; 0x430
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f240 402c 	movw	r0, #1068	; 0x42c
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <atexit>:
 8000250:	4601      	mov	r1, r0
 8000252:	2000      	movs	r0, #0
 8000254:	4602      	mov	r2, r0
 8000256:	4603      	mov	r3, r0
 8000258:	f000 b848 	b.w	80002ec <__register_exitproc>

0800025c <__libc_fini_array>:
 800025c:	b538      	push	{r3, r4, r5, lr}
 800025e:	f241 04c0 	movw	r4, #4288	; 0x10c0
 8000262:	f241 05bc 	movw	r5, #4284	; 0x10bc
 8000266:	f6c0 0500 	movt	r5, #2048	; 0x800
 800026a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800026e:	1b64      	subs	r4, r4, r5
 8000270:	10a4      	asrs	r4, r4, #2
 8000272:	bf18      	it	ne
 8000274:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8000278:	d005      	beq.n	8000286 <__libc_fini_array+0x2a>
 800027a:	3c01      	subs	r4, #1
 800027c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000280:	4798      	blx	r3
 8000282:	2c00      	cmp	r4, #0
 8000284:	d1f9      	bne.n	800027a <__libc_fini_array+0x1e>
 8000286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800028a:	f000 bef1 	b.w	8001070 <_fini>
 800028e:	bf00      	nop

08000290 <__libc_init_array>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f241 06b4 	movw	r6, #4276	; 0x10b4
 8000296:	f241 05b4 	movw	r5, #4276	; 0x10b4
 800029a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800029e:	f6c0 0600 	movt	r6, #2048	; 0x800
 80002a2:	1b76      	subs	r6, r6, r5
 80002a4:	10b6      	asrs	r6, r6, #2
 80002a6:	bf1c      	itt	ne
 80002a8:	3d04      	subne	r5, #4
 80002aa:	2400      	movne	r4, #0
 80002ac:	d005      	beq.n	80002ba <__libc_init_array+0x2a>
 80002ae:	3401      	adds	r4, #1
 80002b0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80002b4:	4798      	blx	r3
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d1f9      	bne.n	80002ae <__libc_init_array+0x1e>
 80002ba:	f241 06bc 	movw	r6, #4284	; 0x10bc
 80002be:	f241 05b4 	movw	r5, #4276	; 0x10b4
 80002c2:	f6c0 0500 	movt	r5, #2048	; 0x800
 80002c6:	f6c0 0600 	movt	r6, #2048	; 0x800
 80002ca:	1b76      	subs	r6, r6, r5
 80002cc:	f000 feca 	bl	8001064 <_init>
 80002d0:	10b6      	asrs	r6, r6, #2
 80002d2:	bf1c      	itt	ne
 80002d4:	3d04      	subne	r5, #4
 80002d6:	2400      	movne	r4, #0
 80002d8:	d006      	beq.n	80002e8 <__libc_init_array+0x58>
 80002da:	3401      	adds	r4, #1
 80002dc:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80002e0:	4798      	blx	r3
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d1f9      	bne.n	80002da <__libc_init_array+0x4a>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	bd70      	pop	{r4, r5, r6, pc}
 80002ea:	bf00      	nop

080002ec <__register_exitproc>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	f241 0480 	movw	r4, #4224	; 0x1080
 80002f2:	f6c0 0400 	movt	r4, #2048	; 0x800
 80002f6:	b085      	sub	sp, #20
 80002f8:	6826      	ldr	r6, [r4, #0]
 80002fa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80002fe:	4607      	mov	r7, r0
 8000300:	2c00      	cmp	r4, #0
 8000302:	d044      	beq.n	800038e <__register_exitproc+0xa2>
 8000304:	6865      	ldr	r5, [r4, #4]
 8000306:	2d1f      	cmp	r5, #31
 8000308:	dd21      	ble.n	800034e <__register_exitproc+0x62>
 800030a:	f240 0400 	movw	r4, #0
 800030e:	f2c0 0400 	movt	r4, #0
 8000312:	b91c      	cbnz	r4, 800031c <__register_exitproc+0x30>
 8000314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000318:	b005      	add	sp, #20
 800031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000320:	9103      	str	r1, [sp, #12]
 8000322:	9202      	str	r2, [sp, #8]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f3af 8000 	nop.w
 800032a:	9903      	ldr	r1, [sp, #12]
 800032c:	9a02      	ldr	r2, [sp, #8]
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	4604      	mov	r4, r0
 8000332:	2800      	cmp	r0, #0
 8000334:	d0ee      	beq.n	8000314 <__register_exitproc+0x28>
 8000336:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 800033a:	2000      	movs	r0, #0
 800033c:	6025      	str	r5, [r4, #0]
 800033e:	6060      	str	r0, [r4, #4]
 8000340:	4605      	mov	r5, r0
 8000342:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8000346:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800034a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800034e:	b93f      	cbnz	r7, 8000360 <__register_exitproc+0x74>
 8000350:	1cab      	adds	r3, r5, #2
 8000352:	2000      	movs	r0, #0
 8000354:	3501      	adds	r5, #1
 8000356:	6065      	str	r5, [r4, #4]
 8000358:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800035c:	b005      	add	sp, #20
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8000364:	f04f 0c01 	mov.w	ip, #1
 8000368:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800036c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8000370:	fa0c f205 	lsl.w	r2, ip, r5
 8000374:	4316      	orrs	r6, r2
 8000376:	2f02      	cmp	r7, #2
 8000378:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800037c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8000380:	bf02      	ittt	eq
 8000382:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8000386:	431a      	orreq	r2, r3
 8000388:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800038c:	e7e0      	b.n	8000350 <__register_exitproc+0x64>
 800038e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8000392:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8000396:	e7b5      	b.n	8000304 <__register_exitproc+0x18>

08000398 <register_fini>:
 8000398:	f240 0300 	movw	r3, #0
 800039c:	f2c0 0300 	movt	r3, #0
 80003a0:	b12b      	cbz	r3, 80003ae <register_fini+0x16>
 80003a2:	f240 205d 	movw	r0, #605	; 0x25d
 80003a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003aa:	f7ff bf51 	b.w	8000250 <atexit>
 80003ae:	4770      	bx	lr

080003b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
	ldr	r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopForever+0x16>)
	cmp	r2, r3
 80003d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003da:	f000 f85b 	bl	8000494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f7ff ff57 	bl	8000290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e2:	f000 f80f 	bl	8000404 <main>

080003e6 <LoopForever>:

LoopForever:
    b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e8:	20009fff 	.word	0x20009fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003ec:	080010c0 	.word	0x080010c0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f4:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003f8:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003fc:	20000460 	.word	0x20000460

08000400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_2_IRQHandler>
	...

08000404 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	b091      	sub	sp, #68	; 0x44
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8000408:	f000 fcce 	bl	8000da8 <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000410:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000414:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800041a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000420:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000422:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000426:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000428:	f000 f872 	bl	8000510 <HAL_RCC_OscConfig>
 800042c:	b100      	cbz	r0, 8000430 <main+0x2c>
 800042e:	e7fe      	b.n	800042e <main+0x2a>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000430:	230f      	movs	r3, #15
 8000432:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800043c:	4629      	mov	r1, r5
 800043e:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000442:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8000444:	f000 fb34 	bl	8000ab0 <HAL_RCC_ClockConfig>
 8000448:	b100      	cbz	r0, 800044c <main+0x48>
 800044a:	e7fe      	b.n	800044a <main+0x46>

  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
  
  /* -1- Enable GPIOE Clock (to be able to program the configuration registers) */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <main+0x84>)

  /* -2- Configure PE.8 to PE.15 IOs in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800044e:	490f      	ldr	r1, [pc, #60]	; (800048c <main+0x88>)

  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
  
  /* -1- Enable GPIOE Clock (to be able to program the configuration registers) */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <main+0x8c>)

  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
  
  /* -1- Enable GPIOE Clock (to be able to program the configuration registers) */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000458:	615a      	str	r2, [r3, #20]
 800045a:	695b      	ldr	r3, [r3, #20]

  /* -2- Configure PE.8 to PE.15 IOs in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045c:	608c      	str	r4, [r1, #8]

  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
  
  /* -1- Enable GPIOE Clock (to be able to program the configuration registers) */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000462:	9306      	str	r3, [sp, #24]
 8000464:	9b06      	ldr	r3, [sp, #24]

  /* -2- Configure PE.8 to PE.15 IOs in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000466:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	e881 0018 	stmia.w	r1, {r3, r4}
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	60cb      	str	r3, [r1, #12]
  
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8000472:	f000 fd21 	bl	8000eb8 <HAL_GPIO_Init>

  /* -3- Toggle PE.8 to PE.15 IOs in an infinite loop */  
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000476:	4806      	ldr	r0, [pc, #24]	; (8000490 <main+0x8c>)
 8000478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047c:	f000 fdee 	bl	800105c <HAL_GPIO_TogglePin>
    /* Insert delay 100 ms */
    HAL_Delay(100);
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f000 fcb1 	bl	8000de8 <HAL_Delay>
 8000486:	e7f6      	b.n	8000476 <main+0x72>
 8000488:	40021000 	.word	0x40021000
 800048c:	20000448 	.word	0x20000448
 8000490:	48000400 	.word	0x48000400

08000494 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <SystemInit+0x58>)
 8000496:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800049a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800049e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <SystemInit+0x5c>)
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	f041 0101 	orr.w	r1, r1, #1
 80004aa:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	4911      	ldr	r1, [pc, #68]	; (80004f4 <SystemInit+0x60>)
 80004b0:	4001      	ands	r1, r0
 80004b2:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004b4:	6819      	ldr	r1, [r3, #0]
 80004b6:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80004ba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80004be:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80004c6:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80004c8:	6859      	ldr	r1, [r3, #4]
 80004ca:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80004ce:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80004d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004d2:	f021 010f 	bic.w	r1, r1, #15
 80004d6:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80004d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004da:	4907      	ldr	r1, [pc, #28]	; (80004f8 <SystemInit+0x64>)
 80004dc:	4001      	ands	r1, r0
 80004de:	6319      	str	r1, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004e0:	2100      	movs	r1, #0
 80004e2:	6099      	str	r1, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	40021000 	.word	0x40021000
 80004f4:	f87fc00c 	.word	0xf87fc00c
 80004f8:	ff00fccc 	.word	0xff00fccc

080004fc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004fc:	4770      	bx	lr

080004fe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler>

08000500 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler>

08000502 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000502:	e7fe      	b.n	8000502 <BusFault_Handler>

08000504 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler>

08000506 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000506:	4770      	bx	lr

08000508 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800050c:	f000 bc5e 	b.w	8000dcc <HAL_IncTick>

08000510 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000516:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000518:	d404      	bmi.n	8000524 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	079d      	lsls	r5, r3, #30
 800051e:	f100 80a9 	bmi.w	8000674 <HAL_RCC_OscConfig+0x164>
 8000522:	e123      	b.n	800076c <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000524:	4bbd      	ldr	r3, [pc, #756]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	f002 020c 	and.w	r2, r2, #12
 800052c:	2a04      	cmp	r2, #4
 800052e:	d007      	beq.n	8000540 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	f002 020c 	and.w	r2, r2, #12
 8000536:	2a08      	cmp	r2, #8
 8000538:	d119      	bne.n	800056e <HAL_RCC_OscConfig+0x5e>
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	03d8      	lsls	r0, r3, #15
 800053e:	d516      	bpl.n	800056e <HAL_RCC_OscConfig+0x5e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000544:	fa93 f3a3 	rbit	r3, r3
 8000548:	4bb4      	ldr	r3, [pc, #720]	; (800081c <HAL_RCC_OscConfig+0x30c>)
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000550:	fa93 f3a3 	rbit	r3, r3
 8000554:	fab3 f383 	clz	r3, r3
 8000558:	f003 031f 	and.w	r3, r3, #31
 800055c:	fa22 f303 	lsr.w	r3, r2, r3
 8000560:	07d9      	lsls	r1, r3, #31
 8000562:	d5da      	bpl.n	800051a <HAL_RCC_OscConfig+0xa>
 8000564:	6863      	ldr	r3, [r4, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1d7      	bne.n	800051a <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800056a:	2001      	movs	r0, #1
 800056c:	e299      	b.n	8000aa2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800056e:	4bab      	ldr	r3, [pc, #684]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800057e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000580:	f000 fc2c 	bl	8000ddc <HAL_GetTick>
 8000584:	4605      	mov	r5, r0
 8000586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800058a:	fa93 f3a3 	rbit	r3, r3
 800058e:	4ba3      	ldr	r3, [pc, #652]	; (800081c <HAL_RCC_OscConfig+0x30c>)
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000596:	fa93 f3a3 	rbit	r3, r3
 800059a:	fab3 f383 	clz	r3, r3
 800059e:	f003 031f 	and.w	r3, r3, #31
 80005a2:	fa22 f303 	lsr.w	r3, r2, r3
 80005a6:	07da      	lsls	r2, r3, #31
 80005a8:	d508      	bpl.n	80005bc <HAL_RCC_OscConfig+0xac>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005aa:	f000 fc17 	bl	8000ddc <HAL_GetTick>
 80005ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80005b2:	1b40      	subs	r0, r0, r5
 80005b4:	4298      	cmp	r0, r3
 80005b6:	d9e6      	bls.n	8000586 <HAL_RCC_OscConfig+0x76>
        {
          return HAL_TIMEOUT;
 80005b8:	2003      	movs	r0, #3
 80005ba:	e272      	b.n	8000aa2 <HAL_RCC_OscConfig+0x592>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005bc:	6862      	ldr	r2, [r4, #4]
 80005be:	4b97      	ldr	r3, [pc, #604]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 80005c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80005c4:	d007      	beq.n	80005d6 <HAL_RCC_OscConfig+0xc6>
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	b14a      	cbz	r2, 80005de <HAL_RCC_OscConfig+0xce>
 80005ca:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005ce:	d106      	bne.n	80005de <HAL_RCC_OscConfig+0xce>
 80005d0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80005d4:	6019      	str	r1, [r3, #0]
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80005dc:	e005      	b.n	80005ea <HAL_RCC_OscConfig+0xda>
 80005de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80005e2:	6019      	str	r1, [r3, #0]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80005ea:	6019      	str	r1, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005ec:	4b8b      	ldr	r3, [pc, #556]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 80005ee:	68a1      	ldr	r1, [r4, #8]
 80005f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005f2:	f020 000f 	bic.w	r0, r0, #15
 80005f6:	4301      	orrs	r1, r0
 80005f8:	62d9      	str	r1, [r3, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005fa:	b1ea      	cbz	r2, 8000638 <HAL_RCC_OscConfig+0x128>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005fc:	f000 fbee 	bl	8000ddc <HAL_GetTick>
 8000600:	4605      	mov	r5, r0
 8000602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000606:	fa93 f3a3 	rbit	r3, r3
 800060a:	4b84      	ldr	r3, [pc, #528]	; (800081c <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	fa22 f303 	lsr.w	r3, r2, r3
 8000622:	07db      	lsls	r3, r3, #31
 8000624:	f53f af79 	bmi.w	800051a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000628:	f000 fbd8 	bl	8000ddc <HAL_GetTick>
 800062c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000630:	1b40      	subs	r0, r0, r5
 8000632:	4298      	cmp	r0, r3
 8000634:	d9e5      	bls.n	8000602 <HAL_RCC_OscConfig+0xf2>
 8000636:	e7bf      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000638:	f000 fbd0 	bl	8000ddc <HAL_GetTick>
 800063c:	4605      	mov	r5, r0
 800063e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	4b75      	ldr	r3, [pc, #468]	; (800081c <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800064e:	fa93 f3a3 	rbit	r3, r3
 8000652:	fab3 f383 	clz	r3, r3
 8000656:	f003 031f 	and.w	r3, r3, #31
 800065a:	fa22 f303 	lsr.w	r3, r2, r3
 800065e:	07d8      	lsls	r0, r3, #31
 8000660:	f57f af5b 	bpl.w	800051a <HAL_RCC_OscConfig+0xa>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000664:	f000 fbba 	bl	8000ddc <HAL_GetTick>
 8000668:	f241 3388 	movw	r3, #5000	; 0x1388
 800066c:	1b40      	subs	r0, r0, r5
 800066e:	4298      	cmp	r0, r3
 8000670:	d9e5      	bls.n	800063e <HAL_RCC_OscConfig+0x12e>
 8000672:	e7a1      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000674:	4b69      	ldr	r3, [pc, #420]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	f012 0f0c 	tst.w	r2, #12
 800067c:	d007      	beq.n	800068e <HAL_RCC_OscConfig+0x17e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	f002 020c 	and.w	r2, r2, #12
 8000684:	2a08      	cmp	r2, #8
 8000686:	d117      	bne.n	80006b8 <HAL_RCC_OscConfig+0x1a8>
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	03d9      	lsls	r1, r3, #15
 800068c:	d414      	bmi.n	80006b8 <HAL_RCC_OscConfig+0x1a8>
 800068e:	2302      	movs	r3, #2
 8000690:	fa93 f3a3 	rbit	r3, r3
 8000694:	4b61      	ldr	r3, [pc, #388]	; (800081c <HAL_RCC_OscConfig+0x30c>)
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	fa93 f3a3 	rbit	r3, r3
 800069e:	fab3 f383 	clz	r3, r3
 80006a2:	f003 031f 	and.w	r3, r3, #31
 80006a6:	fa22 f303 	lsr.w	r3, r2, r3
 80006aa:	07da      	lsls	r2, r3, #31
 80006ac:	d52b      	bpl.n	8000706 <HAL_RCC_OscConfig+0x1f6>
 80006ae:	6923      	ldr	r3, [r4, #16]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	f47f af5a 	bne.w	800056a <HAL_RCC_OscConfig+0x5a>
 80006b6:	e026      	b.n	8000706 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b8:	6922      	ldr	r2, [r4, #16]
 80006ba:	2301      	movs	r3, #1
 80006bc:	b392      	cbz	r2, 8000724 <HAL_RCC_OscConfig+0x214>
 80006be:	fa93 f3a3 	rbit	r3, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80006cc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006d4:	f000 fb82 	bl	8000ddc <HAL_GetTick>
 80006d8:	4605      	mov	r5, r0
 80006da:	2302      	movs	r3, #2
 80006dc:	fa93 f3a3 	rbit	r3, r3
 80006e0:	4b4e      	ldr	r3, [pc, #312]	; (800081c <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	fa93 f3a3 	rbit	r3, r3
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	fa22 f303 	lsr.w	r3, r2, r3
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d405      	bmi.n	8000706 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006fa:	f000 fb6f 	bl	8000ddc <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2864      	cmp	r0, #100	; 0x64
 8000702:	d9ea      	bls.n	80006da <HAL_RCC_OscConfig+0x1ca>
 8000704:	e758      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 8000708:	21f8      	movs	r1, #248	; 0xf8
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	fa91 f1a1 	rbit	r1, r1
 8000710:	6963      	ldr	r3, [r4, #20]
 8000712:	fab1 f181 	clz	r1, r1
 8000716:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800071a:	408b      	lsls	r3, r1
 800071c:	4313      	orrs	r3, r2
 800071e:	4a3f      	ldr	r2, [pc, #252]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e023      	b.n	800076c <HAL_RCC_OscConfig+0x25c>
 8000724:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000728:	fab3 f383 	clz	r3, r3
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000732:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800073a:	f000 fb4f 	bl	8000ddc <HAL_GetTick>
 800073e:	4605      	mov	r5, r0
 8000740:	2302      	movs	r3, #2
 8000742:	fa93 f3a3 	rbit	r3, r3
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <HAL_RCC_OscConfig+0x30c>)
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	2302      	movs	r3, #2
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	fab3 f383 	clz	r3, r3
 8000754:	f003 031f 	and.w	r3, r3, #31
 8000758:	fa22 f303 	lsr.w	r3, r2, r3
 800075c:	07d8      	lsls	r0, r3, #31
 800075e:	d505      	bpl.n	800076c <HAL_RCC_OscConfig+0x25c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000760:	f000 fb3c 	bl	8000ddc <HAL_GetTick>
 8000764:	1b40      	subs	r0, r0, r5
 8000766:	2864      	cmp	r0, #100	; 0x64
 8000768:	d9ea      	bls.n	8000740 <HAL_RCC_OscConfig+0x230>
 800076a:	e725      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	0719      	lsls	r1, r3, #28
 8000770:	d404      	bmi.n	800077c <HAL_RCC_OscConfig+0x26c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	f140 80aa 	bpl.w	80008ce <HAL_RCC_OscConfig+0x3be>
 800077a:	e053      	b.n	8000824 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800077c:	69a1      	ldr	r1, [r4, #24]
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <HAL_RCC_OscConfig+0x310>)
 8000780:	2201      	movs	r2, #1
 8000782:	b329      	cbz	r1, 80007d0 <HAL_RCC_OscConfig+0x2c0>
 8000784:	fa92 f2a2 	rbit	r2, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000788:	fab2 f282 	clz	r2, r2
 800078c:	2101      	movs	r1, #1
 800078e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000792:	f000 fb23 	bl	8000ddc <HAL_GetTick>
 8000796:	4605      	mov	r5, r0
 8000798:	2302      	movs	r3, #2
 800079a:	fa93 f3a3 	rbit	r3, r3
 800079e:	2302      	movs	r3, #2
 80007a0:	fa93 f3a3 	rbit	r3, r3
 80007a4:	2302      	movs	r3, #2
 80007a6:	fa93 f3a3 	rbit	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 80007ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007ae:	2302      	movs	r3, #2
 80007b0:	fa93 f3a3 	rbit	r3, r3
 80007b4:	fab3 f383 	clz	r3, r3
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	fa22 f303 	lsr.w	r3, r2, r3
 80007c0:	07db      	lsls	r3, r3, #31
 80007c2:	d4d6      	bmi.n	8000772 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007c4:	f000 fb0a 	bl	8000ddc <HAL_GetTick>
 80007c8:	1b40      	subs	r0, r0, r5
 80007ca:	2864      	cmp	r0, #100	; 0x64
 80007cc:	d9e4      	bls.n	8000798 <HAL_RCC_OscConfig+0x288>
 80007ce:	e6f3      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
 80007d0:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2100      	movs	r1, #0
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007de:	f000 fafd 	bl	8000ddc <HAL_GetTick>
 80007e2:	4605      	mov	r5, r0
 80007e4:	2302      	movs	r3, #2
 80007e6:	fa93 f3a3 	rbit	r3, r3
 80007ea:	2302      	movs	r3, #2
 80007ec:	fa93 f3a3 	rbit	r3, r3
 80007f0:	2302      	movs	r3, #2
 80007f2:	fa93 f3a3 	rbit	r3, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_RCC_OscConfig+0x30c>)
 80007f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007fa:	2302      	movs	r3, #2
 80007fc:	fa93 f3a3 	rbit	r3, r3
 8000800:	fab3 f383 	clz	r3, r3
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	fa22 f303 	lsr.w	r3, r2, r3
 800080c:	07d8      	lsls	r0, r3, #31
 800080e:	d5b0      	bpl.n	8000772 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000810:	f000 fae4 	bl	8000ddc <HAL_GetTick>
 8000814:	1b40      	subs	r0, r0, r5
 8000816:	2864      	cmp	r0, #100	; 0x64
 8000818:	d9e4      	bls.n	80007e4 <HAL_RCC_OscConfig+0x2d4>
 800081a:	e6cd      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
 800081c:	40021000 	.word	0x40021000
 8000820:	42420480 	.word	0x42420480
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	4ba0      	ldr	r3, [pc, #640]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800082c:	61da      	str	r2, [r3, #28]
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000838:	4b9c      	ldr	r3, [pc, #624]	; (8000aac <HAL_RCC_OscConfig+0x59c>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000840:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000842:	f000 facb 	bl	8000ddc <HAL_GetTick>
 8000846:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000848:	4b98      	ldr	r3, [pc, #608]	; (8000aac <HAL_RCC_OscConfig+0x59c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	05d9      	lsls	r1, r3, #23
 800084e:	d542      	bpl.n	80008d6 <HAL_RCC_OscConfig+0x3c6>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000850:	4b95      	ldr	r3, [pc, #596]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
 8000852:	6a1a      	ldr	r2, [r3, #32]
 8000854:	f022 0201 	bic.w	r2, r2, #1
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	f022 0204 	bic.w	r2, r2, #4
 8000860:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000862:	f000 fabb 	bl	8000ddc <HAL_GetTick>
 8000866:	4605      	mov	r5, r0
 8000868:	2302      	movs	r3, #2
 800086a:	fa93 f3a3 	rbit	r3, r3
 800086e:	2202      	movs	r2, #2
 8000870:	fa92 f2a2 	rbit	r2, r2
 8000874:	4b8c      	ldr	r3, [pc, #560]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000876:	2a00      	cmp	r2, #0
 8000878:	d033      	beq.n	80008e2 <HAL_RCC_OscConfig+0x3d2>
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	2202      	movs	r2, #2
 800087e:	fa92 f2a2 	rbit	r2, r2
 8000882:	fab2 f282 	clz	r2, r2
 8000886:	f002 021f 	and.w	r2, r2, #31
 800088a:	40d3      	lsrs	r3, r2
 800088c:	07da      	lsls	r2, r3, #31
 800088e:	d42d      	bmi.n	80008ec <HAL_RCC_OscConfig+0x3dc>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000890:	68e2      	ldr	r2, [r4, #12]
 8000892:	4b85      	ldr	r3, [pc, #532]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
 8000894:	2a01      	cmp	r2, #1
 8000896:	d131      	bne.n	80008fc <HAL_RCC_OscConfig+0x3ec>
 8000898:	6a1a      	ldr	r2, [r3, #32]
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008a0:	f000 fa9c 	bl	8000ddc <HAL_GetTick>
 80008a4:	4605      	mov	r5, r0
 80008a6:	2302      	movs	r3, #2
 80008a8:	fa93 f3a3 	rbit	r3, r3
 80008ac:	2202      	movs	r2, #2
 80008ae:	fa92 f2a2 	rbit	r2, r2
 80008b2:	4b7d      	ldr	r3, [pc, #500]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d03c      	beq.n	8000932 <HAL_RCC_OscConfig+0x422>
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	2202      	movs	r2, #2
 80008bc:	fa92 f2a2 	rbit	r2, r2
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	f002 021f 	and.w	r2, r2, #31
 80008c8:	40d3      	lsrs	r3, r2
 80008ca:	07db      	lsls	r3, r3, #31
 80008cc:	d536      	bpl.n	800093c <HAL_RCC_OscConfig+0x42c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008ce:	69e3      	ldr	r3, [r4, #28]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d15c      	bne.n	800098e <HAL_RCC_OscConfig+0x47e>
 80008d4:	e0b1      	b.n	8000a3a <HAL_RCC_OscConfig+0x52a>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80008d6:	f000 fa81 	bl	8000ddc <HAL_GetTick>
 80008da:	1b40      	subs	r0, r0, r5
 80008dc:	2864      	cmp	r0, #100	; 0x64
 80008de:	d9b3      	bls.n	8000848 <HAL_RCC_OscConfig+0x338>
 80008e0:	e66a      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
 80008e2:	2202      	movs	r2, #2
 80008e4:	fa92 f2a2 	rbit	r2, r2
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	e7c7      	b.n	800087c <HAL_RCC_OscConfig+0x36c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ec:	f000 fa76 	bl	8000ddc <HAL_GetTick>
 80008f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f4:	1b40      	subs	r0, r0, r5
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d9b6      	bls.n	8000868 <HAL_RCC_OscConfig+0x358>
 80008fa:	e65d      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008fc:	b95a      	cbnz	r2, 8000916 <HAL_RCC_OscConfig+0x406>
 80008fe:	6a1a      	ldr	r2, [r3, #32]
 8000900:	f022 0201 	bic.w	r2, r2, #1
 8000904:	621a      	str	r2, [r3, #32]
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	f022 0204 	bic.w	r2, r2, #4
 800090c:	621a      	str	r2, [r3, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800090e:	f000 fa65 	bl	8000ddc <HAL_GetTick>
 8000912:	4605      	mov	r5, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000914:	e030      	b.n	8000978 <HAL_RCC_OscConfig+0x468>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000916:	2a05      	cmp	r2, #5
 8000918:	6a1a      	ldr	r2, [r3, #32]
 800091a:	d103      	bne.n	8000924 <HAL_RCC_OscConfig+0x414>
 800091c:	f042 0204 	orr.w	r2, r2, #4
 8000920:	621a      	str	r2, [r3, #32]
 8000922:	e7b9      	b.n	8000898 <HAL_RCC_OscConfig+0x388>
 8000924:	f022 0201 	bic.w	r2, r2, #1
 8000928:	621a      	str	r2, [r3, #32]
 800092a:	6a1a      	ldr	r2, [r3, #32]
 800092c:	f022 0204 	bic.w	r2, r2, #4
 8000930:	e7b5      	b.n	800089e <HAL_RCC_OscConfig+0x38e>
 8000932:	2202      	movs	r2, #2
 8000934:	fa92 f2a2 	rbit	r2, r2
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	e7be      	b.n	80008ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800093c:	f000 fa4e 	bl	8000ddc <HAL_GetTick>
 8000940:	f241 3388 	movw	r3, #5000	; 0x1388
 8000944:	1b40      	subs	r0, r0, r5
 8000946:	4298      	cmp	r0, r3
 8000948:	d9ad      	bls.n	80008a6 <HAL_RCC_OscConfig+0x396>
 800094a:	e635      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
 800094c:	2202      	movs	r2, #2
 800094e:	fa92 f2a2 	rbit	r2, r2
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	2202      	movs	r2, #2
 8000956:	fa92 f2a2 	rbit	r2, r2
 800095a:	fab2 f282 	clz	r2, r2
 800095e:	f002 021f 	and.w	r2, r2, #31
 8000962:	40d3      	lsrs	r3, r2
 8000964:	07d8      	lsls	r0, r3, #31
 8000966:	d5b2      	bpl.n	80008ce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000968:	f000 fa38 	bl	8000ddc <HAL_GetTick>
 800096c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000970:	1b40      	subs	r0, r0, r5
 8000972:	4298      	cmp	r0, r3
 8000974:	f63f ae20 	bhi.w	80005b8 <HAL_RCC_OscConfig+0xa8>
 8000978:	2302      	movs	r3, #2
 800097a:	fa93 f3a3 	rbit	r3, r3
 800097e:	2202      	movs	r2, #2
 8000980:	fa92 f2a2 	rbit	r2, r2
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000986:	2a00      	cmp	r2, #0
 8000988:	d0e0      	beq.n	800094c <HAL_RCC_OscConfig+0x43c>
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	e7e2      	b.n	8000954 <HAL_RCC_OscConfig+0x444>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800098e:	4a46      	ldr	r2, [pc, #280]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
 8000990:	6852      	ldr	r2, [r2, #4]
 8000992:	f002 020c 	and.w	r2, r2, #12
 8000996:	2a08      	cmp	r2, #8
 8000998:	f43f ade7 	beq.w	800056a <HAL_RCC_OscConfig+0x5a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800099c:	2b02      	cmp	r3, #2
 800099e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a2:	d158      	bne.n	8000a56 <HAL_RCC_OscConfig+0x546>
 80009a4:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009a8:	fab3 f383 	clz	r3, r3
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ba:	f000 fa0f 	bl	8000ddc <HAL_GetTick>
 80009be:	4605      	mov	r5, r0
 80009c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d0:	fa93 f3a3 	rbit	r3, r3
 80009d4:	fab3 f383 	clz	r3, r3
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	fa22 f303 	lsr.w	r3, r2, r3
 80009e0:	07d9      	lsls	r1, r3, #31
 80009e2:	d42c      	bmi.n	8000a3e <HAL_RCC_OscConfig+0x52e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
 80009e6:	6a20      	ldr	r0, [r4, #32]
 80009e8:	6859      	ldr	r1, [r3, #4]
 80009ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009ec:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
 80009f0:	4302      	orrs	r2, r0
 80009f2:	430a      	orrs	r2, r1
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009fa:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a08:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a10:	f000 f9e4 	bl	8000ddc <HAL_GetTick>
 8000a14:	4604      	mov	r4, r0
 8000a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a1a:	fa93 f3a3 	rbit	r3, r3
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a26:	fa93 f3a3 	rbit	r3, r3
 8000a2a:	fab3 f383 	clz	r3, r3
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	fa22 f303 	lsr.w	r3, r2, r3
 8000a36:	07da      	lsls	r2, r3, #31
 8000a38:	d507      	bpl.n	8000a4a <HAL_RCC_OscConfig+0x53a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e031      	b.n	8000aa2 <HAL_RCC_OscConfig+0x592>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a3e:	f000 f9cd 	bl	8000ddc <HAL_GetTick>
 8000a42:	1b40      	subs	r0, r0, r5
 8000a44:	2864      	cmp	r0, #100	; 0x64
 8000a46:	d9bb      	bls.n	80009c0 <HAL_RCC_OscConfig+0x4b0>
 8000a48:	e5b6      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4a:	f000 f9c7 	bl	8000ddc <HAL_GetTick>
 8000a4e:	1b00      	subs	r0, r0, r4
 8000a50:	2864      	cmp	r0, #100	; 0x64
 8000a52:	d9e0      	bls.n	8000a16 <HAL_RCC_OscConfig+0x506>
 8000a54:	e5b0      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
 8000a56:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a5a:	fab3 f383 	clz	r3, r3
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a64:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6c:	f000 f9b6 	bl	8000ddc <HAL_GetTick>
 8000a70:	4604      	mov	r4, r0
 8000a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_RCC_OscConfig+0x598>)
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a82:	fa93 f3a3 	rbit	r3, r3
 8000a86:	fab3 f383 	clz	r3, r3
 8000a8a:	f003 031f 	and.w	r3, r3, #31
 8000a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a92:	07db      	lsls	r3, r3, #31
 8000a94:	d5d1      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a96:	f000 f9a1 	bl	8000ddc <HAL_GetTick>
 8000a9a:	1b00      	subs	r0, r0, r4
 8000a9c:	2864      	cmp	r0, #100	; 0x64
 8000a9e:	d9e8      	bls.n	8000a72 <HAL_RCC_OscConfig+0x562>
 8000aa0:	e58a      	b.n	80005b8 <HAL_RCC_OscConfig+0xa8>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000aa2:	b003      	add	sp, #12
 8000aa4:	bd30      	pop	{r4, r5, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40007000 	.word	0x40007000

08000ab0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ab0:	4b8b      	ldr	r3, [pc, #556]	; (8000ce0 <HAL_RCC_ClockConfig+0x230>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	f002 0207 	and.w	r2, r2, #7
 8000ab8:	4291      	cmp	r1, r2
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000aba:	b570      	push	{r4, r5, r6, lr}
 8000abc:	4604      	mov	r4, r0
 8000abe:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac0:	f240 8084 	bls.w	8000bcc <HAL_RCC_ClockConfig+0x11c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	f022 0207 	bic.w	r2, r2, #7
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d001      	beq.n	8000adc <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8000ad8:	2001      	movs	r0, #1
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000adc:	6803      	ldr	r3, [r0, #0]
 8000ade:	079d      	lsls	r5, r3, #30
 8000ae0:	d506      	bpl.n	8000af0 <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ae2:	4a80      	ldr	r2, [pc, #512]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000ae4:	68a1      	ldr	r1, [r4, #8]
 8000ae6:	6850      	ldr	r0, [r2, #4]
 8000ae8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8000aec:	4301      	orrs	r1, r0
 8000aee:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000af0:	07d8      	lsls	r0, r3, #31
 8000af2:	d40b      	bmi.n	8000b0c <HAL_RCC_ClockConfig+0x5c>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	0759      	lsls	r1, r3, #29
 8000af8:	f140 80e2 	bpl.w	8000cc0 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000afc:	4a79      	ldr	r2, [pc, #484]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000afe:	68e1      	ldr	r1, [r4, #12]
 8000b00:	6850      	ldr	r0, [r2, #4]
 8000b02:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000b06:	4301      	orrs	r1, r0
 8000b08:	6051      	str	r1, [r2, #4]
 8000b0a:	e0d9      	b.n	8000cc0 <HAL_RCC_ClockConfig+0x210>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0c:	6863      	ldr	r3, [r4, #4]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d108      	bne.n	8000b24 <HAL_RCC_ClockConfig+0x74>
 8000b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b16:	fa92 f2a2 	rbit	r2, r2
 8000b1a:	4a72      	ldr	r2, [pc, #456]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1c:	6811      	ldr	r1, [r2, #0]
 8000b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b22:	e010      	b.n	8000b46 <HAL_RCC_ClockConfig+0x96>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d108      	bne.n	8000b3a <HAL_RCC_ClockConfig+0x8a>
 8000b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b2c:	fa92 f2a2 	rbit	r2, r2
 8000b30:	4a6c      	ldr	r2, [pc, #432]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b32:	6811      	ldr	r1, [r2, #0]
 8000b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b38:	e005      	b.n	8000b46 <HAL_RCC_ClockConfig+0x96>
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	fa92 f2a2 	rbit	r2, r2
 8000b40:	4a68      	ldr	r2, [pc, #416]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b42:	6811      	ldr	r1, [r2, #0]
 8000b44:	2202      	movs	r2, #2
 8000b46:	fa92 f2a2 	rbit	r2, r2
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	f002 021f 	and.w	r2, r2, #31
 8000b52:	fa21 f202 	lsr.w	r2, r1, r2
 8000b56:	07d2      	lsls	r2, r2, #31
 8000b58:	d5be      	bpl.n	8000ad8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b5a:	4a62      	ldr	r2, [pc, #392]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000b5c:	6851      	ldr	r1, [r2, #4]
 8000b5e:	f021 0103 	bic.w	r1, r1, #3
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6053      	str	r3, [r2, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b66:	f000 f939 	bl	8000ddc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b6a:	6863      	ldr	r3, [r4, #4]
 8000b6c:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6e:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b70:	d10e      	bne.n	8000b90 <HAL_RCC_ClockConfig+0xe0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d0ba      	beq.n	8000af4 <HAL_RCC_ClockConfig+0x44>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7e:	f000 f92d 	bl	8000ddc <HAL_GetTick>
 8000b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	d9f2      	bls.n	8000b72 <HAL_RCC_ClockConfig+0xc2>
          {
            return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d00c      	beq.n	8000bae <HAL_RCC_ClockConfig+0xfe>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b94:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f013 0f0c 	tst.w	r3, #12
 8000b9c:	d10e      	bne.n	8000bbc <HAL_RCC_ClockConfig+0x10c>
 8000b9e:	e7a9      	b.n	8000af4 <HAL_RCC_ClockConfig+0x44>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba0:	f000 f91c 	bl	8000ddc <HAL_GetTick>
 8000ba4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ba8:	1b40      	subs	r0, r0, r5
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d8ee      	bhi.n	8000b8c <HAL_RCC_ClockConfig+0xdc>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d1f2      	bne.n	8000ba0 <HAL_RCC_ClockConfig+0xf0>
 8000bba:	e79b      	b.n	8000af4 <HAL_RCC_ClockConfig+0x44>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bbc:	f000 f90e 	bl	8000ddc <HAL_GetTick>
 8000bc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bc4:	1b40      	subs	r0, r0, r5
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d9e4      	bls.n	8000b94 <HAL_RCC_ClockConfig+0xe4>
 8000bca:	e7df      	b.n	8000b8c <HAL_RCC_ClockConfig+0xdc>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	079e      	lsls	r6, r3, #30
 8000bd0:	d506      	bpl.n	8000be0 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd2:	4a44      	ldr	r2, [pc, #272]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000bd4:	68a1      	ldr	r1, [r4, #8]
 8000bd6:	6850      	ldr	r0, [r2, #4]
 8000bd8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8000bdc:	4301      	orrs	r1, r0
 8000bde:	6051      	str	r1, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000be0:	07d8      	lsls	r0, r3, #31
 8000be2:	d40c      	bmi.n	8000bfe <HAL_RCC_ClockConfig+0x14e>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be4:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <HAL_RCC_ClockConfig+0x230>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	f022 0207 	bic.w	r2, r2, #7
 8000bec:	432a      	orrs	r2, r5
 8000bee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f47f af6e 	bne.w	8000ad8 <HAL_RCC_ClockConfig+0x28>
 8000bfc:	e77a      	b.n	8000af4 <HAL_RCC_ClockConfig+0x44>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <HAL_RCC_ClockConfig+0x166>
 8000c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c08:	fa92 f2a2 	rbit	r2, r2
 8000c0c:	4a35      	ldr	r2, [pc, #212]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	6811      	ldr	r1, [r2, #0]
 8000c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c14:	e010      	b.n	8000c38 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d108      	bne.n	8000c2c <HAL_RCC_ClockConfig+0x17c>
 8000c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c1e:	fa92 f2a2 	rbit	r2, r2
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c24:	6811      	ldr	r1, [r2, #0]
 8000c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c2a:	e005      	b.n	8000c38 <HAL_RCC_ClockConfig+0x188>
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	fa92 f2a2 	rbit	r2, r2
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	2202      	movs	r2, #2
 8000c38:	fa92 f2a2 	rbit	r2, r2
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	f002 021f 	and.w	r2, r2, #31
 8000c44:	fa21 f202 	lsr.w	r2, r1, r2
 8000c48:	07d1      	lsls	r1, r2, #31
 8000c4a:	f57f af45 	bpl.w	8000ad8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c4e:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000c50:	6851      	ldr	r1, [r2, #4]
 8000c52:	f021 0103 	bic.w	r1, r1, #3
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6053      	str	r3, [r2, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5a:	f000 f8bf 	bl	8000ddc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c5e:	6863      	ldr	r3, [r4, #4]
 8000c60:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c62:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c64:	d10d      	bne.n	8000c82 <HAL_RCC_ClockConfig+0x1d2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d0b8      	beq.n	8000be4 <HAL_RCC_ClockConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c72:	f000 f8b3 	bl	8000ddc <HAL_GetTick>
 8000c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c7a:	1b80      	subs	r0, r0, r6
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	d9f2      	bls.n	8000c66 <HAL_RCC_ClockConfig+0x1b6>
 8000c80:	e784      	b.n	8000b8c <HAL_RCC_ClockConfig+0xdc>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d00d      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0x1f2>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f013 0f0c 	tst.w	r3, #12
 8000c8e:	d10f      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0x200>
 8000c90:	e7a8      	b.n	8000be4 <HAL_RCC_ClockConfig+0x134>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c92:	f000 f8a3 	bl	8000ddc <HAL_GetTick>
 8000c96:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c9a:	1b80      	subs	r0, r0, r6
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f63f af75 	bhi.w	8000b8c <HAL_RCC_ClockConfig+0xdc>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d1f1      	bne.n	8000c92 <HAL_RCC_ClockConfig+0x1e2>
 8000cae:	e799      	b.n	8000be4 <HAL_RCC_ClockConfig+0x134>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb0:	f000 f894 	bl	8000ddc <HAL_GetTick>
 8000cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cb8:	1b80      	subs	r0, r0, r6
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d9e3      	bls.n	8000c86 <HAL_RCC_ClockConfig+0x1d6>
 8000cbe:	e765      	b.n	8000b8c <HAL_RCC_ClockConfig+0xdc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc0:	071a      	lsls	r2, r3, #28
 8000cc2:	d507      	bpl.n	8000cd4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_RCC_ClockConfig+0x234>)
 8000cc6:	6921      	ldr	r1, [r4, #16]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000cce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000cd2:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd4:	200f      	movs	r0, #15
 8000cd6:	f000 f854 	bl	8000d82 <HAL_InitTick>
  
  return HAL_OK;
 8000cda:	2000      	movs	r0, #0
}
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000cea:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000cec:	f003 010c 	and.w	r1, r3, #12
 8000cf0:	2908      	cmp	r1, #8
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	d11e      	bne.n	8000d34 <HAL_RCC_GetSysClockFreq+0x4c>
 8000cf6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000cfa:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cfe:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d0c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d0e:	5c82      	ldrb	r2, [r0, r2]
 8000d10:	200f      	movs	r0, #15
 8000d12:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d16:	fab0 f080 	clz	r0, r0
 8000d1a:	f001 010f 	and.w	r1, r1, #15
 8000d1e:	40c1      	lsrs	r1, r0
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <HAL_RCC_GetSysClockFreq+0x58>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000d22:	03db      	lsls	r3, r3, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d24:	5c41      	ldrb	r1, [r0, r1]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000d26:	bf4a      	itet	mi
 8000d28:	4806      	ldrmi	r0, [pc, #24]	; (8000d44 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000d2a:	4807      	ldrpl	r0, [pc, #28]	; (8000d48 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000d2c:	fbb0 f0f1 	udivmi	r0, r0, r1
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000d30:	4350      	muls	r0, r2
 8000d32:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	08001094 	.word	0x08001094
 8000d40:	08001084 	.word	0x08001084
 8000d44:	007a1200 	.word	0x007a1200
 8000d48:	003d0900 	.word	0x003d0900

08000d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d4c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000d4e:	f7ff ffcb 	bl	8000ce8 <HAL_RCC_GetSysClockFreq>
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_RCC_GetHCLKFreq+0x28>)
 8000d54:	22f0      	movs	r2, #240	; 0xf0
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	fa92 f2a2 	rbit	r2, r2
 8000d5c:	fab2 f282 	clz	r2, r2
 8000d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d64:	40d3      	lsrs	r3, r2
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_RCC_GetHCLKFreq+0x30>)
 8000d6e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000d70:	bd08      	pop	{r3, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	080010a4 	.word	0x080010a4
 8000d7c:	20000428 	.word	0x20000428

08000d80 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000d80:	4770      	bx	lr

08000d82 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d82:	b510      	push	{r4, lr}
 8000d84:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000d86:	f7ff ffe1 	bl	8000d4c <HAL_RCC_GetHCLKFreq>
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d92:	f000 f87b 	bl	8000e8c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f000 f843 	bl	8000e28 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000da2:	2000      	movs	r0, #0
 8000da4:	bd10      	pop	{r4, pc}
	...

08000da8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_Init+0x20>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f042 0210 	orr.w	r2, r2, #16
 8000db2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f825 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f7ff ffe1 	bl	8000d82 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	bd08      	pop	{r3, pc}
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <HAL_IncTick+0xc>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000045c 	.word	0x2000045c

08000ddc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_GetTick+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000045c 	.word	0x2000045c

08000de8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000de8:	b513      	push	{r0, r1, r4, lr}
 8000dea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff6 	bl	8000ddc <HAL_GetTick>
 8000df0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000df2:	f7ff fff3 	bl	8000ddc <HAL_GetTick>
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	1b00      	subs	r0, r0, r4
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d3f9      	bcc.n	8000df2 <HAL_Delay+0xa>
  {
  }
}
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd10      	pop	{r4, pc}
	...

08000e04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e06:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e16:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000e1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_NVIC_SetPriority+0x5c>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	f1c3 0407 	rsb	r4, r3, #7
 8000e38:	2c04      	cmp	r4, #4
 8000e3a:	bf28      	it	cs
 8000e3c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e44:	bf8c      	ite	hi
 8000e46:	3b03      	subhi	r3, #3
 8000e48:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4a:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4e:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e52:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e56:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000e5e:	4313      	orrs	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
 8000e60:	2800      	cmp	r0, #0
 8000e62:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000e66:	da05      	bge.n	8000e74 <HAL_NVIC_SetPriority+0x4c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	f000 000f 	and.w	r0, r0, #15
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_NVIC_SetPriority+0x60>)
 8000e70:	541a      	strb	r2, [r3, r0]
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e78:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	e000ed14 	.word	0xe000ed14

08000e8c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e92:	d20a      	bcs.n	8000eaa <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e98:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	21f0      	movs	r1, #240	; 0xf0
 8000e9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	2207      	movs	r2, #7
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	4770      	bx	lr
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000eaa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8000ebc:	680f      	ldr	r7, [r1, #0]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000ebe:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8000ec0:	fa37 f203 	lsrs.w	r2, r7, r3
 8000ec4:	f000 80c0 	beq.w	8001048 <HAL_GPIO_Init+0x190>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8000ec8:	2401      	movs	r4, #1
 8000eca:	409c      	lsls	r4, r3

    if(iocurrent)
 8000ecc:	403c      	ands	r4, r7
 8000ece:	f000 80b9 	beq.w	8001044 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	684a      	ldr	r2, [r1, #4]
 8000ed4:	f022 0610 	bic.w	r6, r2, #16
 8000ed8:	2e02      	cmp	r6, #2
 8000eda:	d116      	bne.n	8000f0a <HAL_GPIO_Init+0x52>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000edc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000ee0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ee4:	f003 0807 	and.w	r8, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ee8:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eec:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000ef0:	f04f 090f 	mov.w	r9, #15
 8000ef4:	fa09 f908 	lsl.w	r9, r9, r8
 8000ef8:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000efc:	690d      	ldr	r5, [r1, #16]
 8000efe:	fa05 f808 	lsl.w	r8, r5, r8
 8000f02:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8000f06:	f8cc 5020 	str.w	r5, [ip, #32]
 8000f0a:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f0c:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f14:	fa0c fc05 	lsl.w	ip, ip, r5
 8000f18:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f1c:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f20:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f24:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f28:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f2a:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2e:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000f30:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	d815      	bhi.n	8000f62 <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f36:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f38:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f3c:	68ce      	ldr	r6, [r1, #12]
 8000f3e:	40ae      	lsls	r6, r5
 8000f40:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 8000f44:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	f04f 0801 	mov.w	r8, #1
 8000f4c:	fa08 f803 	lsl.w	r8, r8, r3
 8000f50:	ea26 0608 	bic.w	r6, r6, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f54:	f3c2 1800 	ubfx	r8, r2, #4, #1
 8000f58:	fa08 f803 	lsl.w	r8, r8, r3
 8000f5c:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8000f60:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f62:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f64:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f68:	688e      	ldr	r6, [r1, #8]
 8000f6a:	40ae      	lsls	r6, r5
 8000f6c:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 8000f70:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	00d5      	lsls	r5, r2, #3
 8000f74:	d566      	bpl.n	8001044 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4d36      	ldr	r5, [pc, #216]	; (8001050 <HAL_GPIO_Init+0x198>)
 8000f78:	69ae      	ldr	r6, [r5, #24]
 8000f7a:	f046 0601 	orr.w	r6, r6, #1
 8000f7e:	61ae      	str	r6, [r5, #24]
 8000f80:	69ad      	ldr	r5, [r5, #24]
 8000f82:	f023 0603 	bic.w	r6, r3, #3
 8000f86:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f8a:	f005 0501 	and.w	r5, r5, #1
 8000f8e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000f92:	9501      	str	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f94:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	9d01      	ldr	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f9a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fa0:	f04f 080f 	mov.w	r8, #15
 8000fa4:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000fa8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fac:	ea25 0808 	bic.w	r8, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000fb0:	d011      	beq.n	8000fd6 <HAL_GPIO_Init+0x11e>
 8000fb2:	4d28      	ldr	r5, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x19c>)
 8000fb4:	42a8      	cmp	r0, r5
 8000fb6:	d010      	beq.n	8000fda <HAL_GPIO_Init+0x122>
 8000fb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fbc:	42a8      	cmp	r0, r5
 8000fbe:	d00e      	beq.n	8000fde <HAL_GPIO_Init+0x126>
 8000fc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_GPIO_Init+0x12a>
 8000fc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	bf14      	ite	ne
 8000fd0:	2505      	movne	r5, #5
 8000fd2:	2504      	moveq	r5, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x12c>
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x12c>
 8000fda:	2501      	movs	r5, #1
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x12c>
 8000fde:	2502      	movs	r5, #2
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x12c>
 8000fe2:	2503      	movs	r5, #3
 8000fe4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000fe8:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fec:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fee:	4e1a      	ldr	r6, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x1a0>)
 8000ff0:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8000ffa:	bf14      	ite	ne
 8000ffc:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001000:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001004:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 8001008:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 800100e:	bf14      	ite	ne
 8001010:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001014:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001018:	4e0f      	ldr	r6, [pc, #60]	; (8001058 <HAL_GPIO_Init+0x1a0>)
 800101a:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001022:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8001026:	bf14      	ite	ne
 8001028:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800102c:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001030:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 8001034:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001036:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_GPIO_Init+0x1a0>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800103a:	bf54      	ite	pl
 800103c:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001040:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 8001042:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001044:	3301      	adds	r3, #1
 8001046:	e73b      	b.n	8000ec0 <HAL_GPIO_Init+0x8>
  }
}
 8001048:	b003      	add	sp, #12
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800105c:	6943      	ldr	r3, [r0, #20]
 800105e:	4059      	eors	r1, r3
 8001060:	6141      	str	r1, [r0, #20]
 8001062:	4770      	bx	lr

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
